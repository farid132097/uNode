   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	
   3               	 ; File          : kernel.S
   4               	 ; Author        : MD. Faridul Islam (faridmdislam@gmail.com)
   5               	 ; Description   : AVR kernel for bare-metal RTOS
   6               	 ; Created       : Jul 27, 2025, 09:30 PM
   7               	 ; Last Modified : Oct 07, 2025, 10:42 PM
   8               	
   9               	
  10               	
  11               	
  12               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
  13               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
  14               	#include "kernel.h"
   1               	
  15               	
  16               	
  17               	
  18               	
  19               	;;============================define user address or macro starting=========================;; 
  20               	.equ     KER_TR ,         1000                            ;TickRate in Hz, not calculated      
  21               	.equ     KER_PRS,         0x03                            ;For prescaler 64, manually select   
  22               	.equ     KER_RLD,         0x82                            ;KER_RLD=0xFF-(F_CPU/KER_PRS/KER_TR) 
  23               	.equ     KER_STK_SZ,      128                             ;stack size in bytes for each task   
  24               	.equ     KER_MX_NTSK,     10                              ;max number of tasks                 
  25               	;;==============================define user address or macro end============================;; 
  26               	
  27               	
  28               	
  29               	
  30               	
  31               	;;===============================define data offsets starting===============================;; 
  32               	.equ     OFB_TICK0,       0x00                            ;offset from KerBase tick count byte0
  33               	.equ     OFB_TICK1,       0x01                            ;offset from KerBase tick count byte1
  34               	.equ     OFB_TICK2,       0x02                            ;offset from KerBase tick count byte2
  35               	.equ     OFB_TICK3,       0x03                            ;offset from KerBase tick count byte3
  36               	.equ     OFB_TICK4,       0x04                            ;offset from KerBase tick count byte4
  37               	.equ     OFB_PRS  ,       0x05                            ;offset from KerBase prescaler       
  38               	.equ     OFB_RLD  ,       0x06                            ;offset from KerBase counter reload  
  39               	.equ     OFB_TID  ,       0x07                            ;offset from KerBase task id         
  40               	.equ     OFB_NTSK ,       0x08                            ;offset from KerBase ntask           
  41               	.equ     OFB_LPR  ,       0x09                            ;offset from KerBase lowest priority 
  42               	.equ     OFB_PTID ,       0x0A                            ;offset from KerBase prio task_id    
  43               	.equ     OFB_UTC  ,       0x0B                            ;offset from KerBase usage tick cnt  
  44               	.equ     OFB_UATC ,       0x0C                            ;offset from KerBase active tick cnt 
  45               	.equ     OFB_USAGE,       0x0D                            ;offset from KerBase cpu usage       
  46               	.equ     OFB_SLCFG,       0x0E                            ;offset from KerBase sleep config    
  47               	.equ     OFM_MSPI ,       0x00                            ;offset from MSPZP msp index field   
  48               	.equ     OFM_MSPS ,       0x02                            ;offset from MSPZP msp starting      
  49               	;;==================================define data offsets end=================================;; 
  50               	
  51               	
  52               	
  53               	
  54               	
  55               	;;===============================define system macro starting===============================;; 
  56               	.equ     TASK_BLOCKED,    0x00                            ;KerSchSts val=0                     
  57               	.equ     TASK_READY,      0x01                            ;KerSchSts val=1                     
  58               	.equ     TASK_EXECUTING,  0x02                            ;KerSchSts val=2                     
  59               	.equ     TASK_SUSPENDED,  0x03                            ;KerSchSts val=3                     
  60               	.equ     TASK_CONS_LAT,   0x04                            ;KerSchSts val=3, constant latency   
  61               	.equ     SCH_MODE_HANDLER,0x00                            ;handler mode in KER_SLP_TIME_MGNT   
  62               	.equ     SCH_MODE_THREAD, 0x01                            ;thread mode in KER_SLP_TIME_MGNT    
  63               	;;==================================define system macro end=================================;; 
  64               	
  65               	
  66               	
  67               	
  68               	
  69               	;;===========================define hardware reg address starting===========================;; 
  70               	;SRAM Mapped Addresses, LDS/STS can be used                                                    
  71               	.equ     SRASSR  ,        0xB6                            ;manually defined ASSR in SRAM       
  72               	.equ     SROCR2B ,        0xB4                            ;manually defined OCR2B in SRAM      
  73               	.equ     SROCR2A ,        0xB3                            ;manually defined OCR2A in SRAM      
  74               	.equ     SRTCNT2 ,        0xB2                            ;manually defined TNCT2 in SRAM      
  75               	.equ     SRTCCR2B,        0xB1                            ;manually defined TCCR2B in SRAM     
  76               	.equ     SRTCCR2A,        0xB0                            ;manually defined TCCR2A in SRAM     
  77               	.equ     SRADMUX ,        0x7C                            ;manually defined ADMUX in SRAM      
  78               	.equ     SRADCSRB,        0x7B                            ;manually defined ADCSRB in SRAM     
  79               	.equ     SRADCSRA,        0x7A                            ;manually defined ADCSRA in SRAM     
  80               	.equ     SRTIMSK2,        0x70                            ;manually defined TIMSK2 in SRAM     
  81               	.equ     SRTIMSK1,        0x6F                            ;manually defined TIMSK1 in SRAM     
  82               	.equ     SRTIMSK0,        0x6E                            ;manually defined TIMSK0 in SRAM     
  83               	.equ     SRWDTCSR,        0x60                            ;manually defined WDTCSR in SRAM     
  84               	.equ     SRSREG  ,        0x5F                            ;manually defined SREG in SRAM       
  85               	.equ     SRSPH   ,        0x5E                            ;manually defined SPH in SRAM        
  86               	.equ     SRSPL   ,        0x5D                            ;manually defined SPL in SRAM        
  87               	.equ     SRMCUCR ,        0x55                            ;manually defined MCUCR in SRAM      
  88               	.equ     SRMCUSR ,        0x54                            ;manually defined MCUSR in SRAM      
  89               	.equ     SRSMCR  ,        0x53                            ;manually defined SMCR in SRAM       
  90               	.equ     SRACSR  ,        0x50                            ;manually defined ACSR in SRAM       
  91               	.equ     SROCR0B ,        0x48                            ;manually defined OCR0B in SRAM      
  92               	.equ     SROCR0A ,        0x47                            ;manually defined OCR0A in SRAM      
  93               	.equ     SRTCNT0 ,        0x46                            ;manually defined TCNT0 in SRAM      
  94               	.equ     SRTCCR0B,        0x45                            ;manually defined TCCR0B in SRAM     
  95               	.equ     SRTCCR0A,        0x44                            ;manually defined TCCR0A in SRAM     
  96               	.equ     SRTIFR2 ,        0x37                            ;manually defined TIFR2 in SRAM      
  97               	.equ     SRTIFR1 ,        0x36                            ;manually defined TIFR1 in SRAM      
  98               	.equ     SRTIFR0 ,        0x35                            ;manually defined TIFR0 in SRAM      
  99               	;IO Mapped Addresses, IN/OUT commands can be used                                              
 100               	.equ     IOSREG  ,        0x3F                            ;manually defined SREG in IO         
 101               	.equ     IOSPH   ,        0x3E                            ;manually defined SPH in IO          
 102               	.equ     IOSPL   ,        0x3D                            ;manually defined SPL in IO          
 103               	.equ     IOMCUCR ,        0x35                            ;manually defined MCUCR in IO        
 104               	.equ     IOMCUSR ,        0x34                            ;manually defined MCUSR in IO        
 105               	.equ     IOSMCR  ,        0x33                            ;manually defined SMCR in IO         
 106               	.equ     IOOCR0B ,        0x28                            ;manually defined OCR0B in IO        
 107               	.equ     IOOCR0A ,        0x27                            ;manually defined OCR0A in IO        
 108               	.equ     IOTCNT0 ,        0x26                            ;manually defined TCNT0 in IO        
 109               	.equ     IOTCCR0B,        0x25                            ;manually defined TCCR0B in IO       
 110               	.equ     IOTCCR0A,        0x24                            ;manually defined TCCR0A in IO       
 111               	.equ     IOTIFR2 ,        0x17                            ;manually defined TIFR2 in IO        
 112               	.equ     IOTIFR1 ,        0x16                            ;manually defined TIFR1 in IO        
 113               	.equ     IOTIFR0 ,        0x15                            ;manually defined TIFR0 in IO        
 114               	;;==============================define hardware reg address end=============================;; 
 115               	
 116               	
 117               	
 118               	
 119               	
 120               	;;=============================define global variables starting=============================;; 
 121               	.section   .bss                                                                                
 122               	                                                                                               
 123               	.global    KerBase                                        ;declare global space for kernel     
 124 0000 0000 0000 	KerBase:   .skip 16                                       ;see offset section                  
 124      0000 0000 
 124      0000 0000 
 124      0000 0000 
 125               	                                                                                               
 126               	.global    KerPSP                                         ;space for process stack pointers    
 127 0010 0000 0000 	KerPSP:    .skip KER_MX_NTSK*2                            ;2 bytes for each task               
 127      0000 0000 
 127      0000 0000 
 127      0000 0000 
 127      0000 0000 
 128               	                                                                                               
 129               	.global    KerSSZ                                         ;stack for main stack pointers       
 130 0024 0000 0000 	KerSSZ:    .skip 14                                       ;stack_ptr(2), MSPZPn(4)             
 130      0000 0000 
 130      0000 0000 
 130      0000 
 131               	                                                                                               
 132               	.global    KerSchSts                                      ;space for scheduler status          
 133 0032 0000 0000 	KerSchSts: .skip KER_MX_NTSK*1                            ;status(1)                           
 133      0000 0000 
 133      0000 
 134               	                                                                                               
 135               	.global    KerSchPr                                       ;space for scheduler priority        
 136 003c 0000 0000 	KerSchPr:  .skip KER_MX_NTSK*1                            ;priority(1)                         
 136      0000 0000 
 136      0000 
 137               	                                                                                               
 138               	.global    KerSchSlp                                      ;space for task sleep                
 139 0046 0000 0000 	KerSchSlp: .skip KER_MX_NTSK*2                            ;timing(2)                           
 139      0000 0000 
 139      0000 0000 
 139      0000 0000 
 139      0000 0000 
 140               	                                                                                               
 141               	.global    KerStack                                       ;space for stack                     
 142 005a 0000 0000 	KerStack:  .skip KER_STK_SZ*KER_MX_NTSK                   ;KER_STK_SZ bytes for each task      
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 142      0000 0000 
 143               	;;==============================define global variables end=================================;; 
 144               	
 145               	
 146               	
 147               	
 148               	
 149               	;;===============================define vector section starting=============================;; 
 150               	.section .vectors, "ax", @progbits                                                             
 151               	                                                                                               
 152 0000 0000 0000 	.org    0x000C                                            ;isr location for wdt                
 152      0000 0000 
 152      0000 0000 
 153:kernel.S      ****         RJMP  __vector_6                                                                       
 154               	.org    0x000E                                            ;isr location for timer2compa async  
 155:kernel.S      ****         RJMP  __vector_7                                                                       
 156               	.org    0x0010                                            ;isr location for timer2compb async  
 157:kernel.S      ****         RJMP  __vector_8                                                                       
 158               	.org    0x0012                                            ;isr location for timer2ovf async    
 159:kernel.S      ****         RJMP  __vector_9                                                                       
 160 0014 0000 0000 	.org    0x0020                                            ;isr location for timer0ovf          
 160      0000 0000 
 160      0000 0000 
 161:kernel.S      ****         RJMP  __vector_16                                                                      
 162               	;;=================================define vector section end================================;; 
 163               	
 164               	
 165               	
 166               	
 167               	
 168               	;;===============================define text section starting===============================;; 
 169               	.section .text                                                                                 
 170               	;;==================================define text section end=================================;; 
 171               	
 172               	
 173               	
 174               	
 175               	
 176               	;;==============================define global functions starting============================;; 
 177               	.global  Kernel_SysTick_Reg_Init                                                               
 178               	.global  Kernel_SysTick_Val_Get                                                                
 179               	.global  Kernel_SysTick_Val_Safely_Get                                                         
 180               	.global  Kernel_Interrupt_Sts_Get                                                              
 181               	.global  Kernel_Init                                                                           
 182               	.global  Kernel_Task_Create                                                                    
 183               	.global  Kernel_Start_Tasks                                                                    
 184               	.global  Kernel_Task_Idle                                                                      
 185               	.global  Kernel_Task_Sleep                                                                     
 186               	.global  Kernel_Task_Constant_Latency                                                          
 187               	.global  Kernel_Task_Constant_Latency_Sleep                                                    
 188               	.global  Kernel_PreSleep_Hook                                                                  
 189               	.global  Kernel_Task_Sleep_Time_Get                                                            
 190               	.global  Kernel_Task_Status_Get                                                                
 191               	.global  Kernel_NTask_Get                                                                      
 192               	.global  Kernel_Task_Prio_Get                                                                  
 193               	.global  Kernel_Lowest_Prio_Get                                                                
 194               	.global  Kernel_High_Prio_Task_ID_Get                                                          
 195               	.global  Kernel_Abs_High_Prio_Task_ID_Get                                                      
 196               	.global  Kernel_CPU_Usage_Get                                                                  
 197               	;;================================define global functions end===============================;; 
 198               	
 199               	
 200               	
 201               	
 202               	
 203               	;;============================debug pin operation init starting=============================;; 
 204               	;used registers          : R18, R19                                                            
 205               	;arg registers           : None                                                                
 206               	;return registers        : None                                                                
 207               	;unsafe access registers : R18, R19                                                            
 208               	.macro  KER_TIMER_INIT                                    ;1.25/1.50uS @8MHz    (10/12 clocks) 
 209               	        #ifdef KER_TIMER0_AS_TICK_SRC                                                          
 210               			;Timer0 overflow vect is used as tick source      ;total 1.5uS @8MHz      ( 12 clocks) 
 211               	        LDS   R18		         , KerBase+OFB_PRS        ;load prescaler         (  2 clocks) 
 212               			LDS   R19		         , KerBase+OFB_RLD        ;load reload val        (  2 clocks) 
 213               			STS   SRTCCR0B           , R18                    ;prescaler-> TCCR0B     (  2 clocks) 
 214               			STS   SRTCNT0            , R19                    ;reload val-> TCNT0     (  2 clocks) 
 215               			LDI   R18                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 216               			STS   SRTIMSK0           , R18                    ;set to TIMSK0          (  2 clocks) 
 217               			SEI                                               ;force enable interrupt (  1 clock ) 
 218               			#endif                                                                                 
 219               			                                                                                       
 220               			#ifdef KER_WDT_AS_TICK_SRC                                                             
 221               			;watchdog timer timeout is used as tick source    ;total 1.5uS @8MHz      ( 10 clocks) 
 222               	        WDR                                               ;reset wdt              (  1 clock ) 
 223               			LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
 224               			ORI   R18                , 0x18                   ;set WDCE,WDE           (  1 clock ) 
 225               			STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 226               			                                                                                       
 227               			#ifdef KER_WDT_TICK_16MS                                                               
 228               			LDI   R18                , 0x40                   ;WDIE                   (  1 clock ) 
 229               			#endif                                                                                 
 230               			                                                                                       
 231               	        #ifdef KER_WDT_TICK_32MS                                                               
 232               			LDI   R18                , 0x41                   ;WDIE, WDPS0            (  1 clock ) 
 233               			#endif                                                                                 
 234               			                                                                                       
 235               			#ifdef KER_WDT_TICK_64MS                                                               
 236               			LDI   R18                , 0x42                   ;WDIE, WDPS1            (  1 clock ) 
 237               			#endif                                                                                 
 238               			                                                                                       
 239               			#ifdef KER_WDT_TICK_125MS                                                              
 240               			LDI   R18                , 0x43                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 241               			#endif                                                                                 
 242               			                                                                                       
 243               			#ifdef KER_WDT_TICK_250MS                                                              
 244               			LDI   R18                , 0x44                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 245               			#endif                                                                                 
 246               			                                                                                       
 247               			#ifdef KER_WDT_TICK_500MS                                                              
 248               			LDI   R18                , 0x45                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 249               			#endif                                                                                 
 250               			                                                                                       
 251               			#ifdef KER_WDT_TICK_1000MS                                                             
 252               			LDI   R18                , 0x46                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 253               			#endif                                                                                 
 254               			                                                                                       
 255               			STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 256               			SEI                                               ;force enable interrupt (  1 clock ) 
 257               			#endif                                                                                 
 258               	                                                                                               
 259               			#ifdef KER_TOSC_AS_TICK_SRC                                                            
 260               			;timer2 asynchornus mode is used as tick source   ;total 1.5uS @8MHz      ( 57 clocks) 
 261               			LDI   R18                , 0x00                   ;clear interrupts       (  1 clock ) 
 262               			STS   SRTIMSK2           , R18                    ;set val to TIMSK2      (  2 clocks) 
 263               			LDI   R18                , 0x20                   ;set AS2 bit            (  1 clock ) 
 264               			STS   SRASSR             , R18                    ;set val to ASSR        (  2 clocks) 
 265               			#ifdef KER_TOSC_TICK_1MS                                                               
 266               			LDI   R18                , 0x20                   ;1000Hz->clk/1/32       (  1 clock ) 
 267               			#endif                                                                                 
 268               			#ifdef KER_TOSC_TICK_10MS                                                              
 269               			LDI   R18                , 0x29                   ;100Hz->clk/8/41        (  1 clock ) 
 270               			#endif                                                                                 
 271               			#ifdef KER_TOSC_TICK_50MS                                                              
 272               			LDI   R18                , 0xCC                   ;20Hz->clk/8/204        (  1 clock ) 
 273               			#endif                                                                                 
 274               			#ifdef KER_TOSC_TICK_100MS                                                             
 275               			LDI   R18                , 0x66                   ;10Hz->clk/32/102       (  1 clock ) 
 276               			#endif                                                                                 
 277               			#ifdef KER_TOSC_TICK_250MS                                                             
 278               			LDI   R18                , 0x80                   ;4Hz->clk/64/128        (  1 clock ) 
 279               			#endif                                                                                 
 280               			#ifdef KER_TOSC_TICK_500MS                                                             
 281               			LDI   R18                , 0x80                   ;2Hz->clk/128/128       (  1 clock ) 
 282               			#endif                                                                                 
 283               			#ifdef KER_TOSC_TICK_1000MS                                                            
 284               			LDI   R18                , 0x80                   ;1Hz->clk/256/128       (  1 clock ) 
 285               			#endif                                                                                 
 286               			STS   SROCR2A            , R18                    ;set val to OCR2A       (  2 clocks) 
 287               			LDI   R18                , 0x00                   ;set val to reg         (  1 clock ) 
 288               			STS   SROCR2B            , R18                    ;set val to OCR2B       (  2 clocks) 
 289               			LDI   R18                , 0x02                   ;set WGM mode           (  1 clock ) 
 290               			STS   SRTCCR2A           , R18                    ;set val to TCCR2A      (  2 clocks) 
 291               			#ifdef KER_TOSC_TICK_1MS                                                               
 292               			LDI   R18                , 0x01                   ;1000Hz->clk/1/32       (  1 clock ) 
 293               			#endif                                                                                 
 294               			#ifdef KER_TOSC_TICK_10MS                                                              
 295               			LDI   R18                , 0x02                   ;100Hz->clk/8/41        (  1 clock ) 
 296               			#endif                                                                                 
 297               			#ifdef KER_TOSC_TICK_50MS                                                              
 298               			LDI   R18                , 0x02                   ;20Hz->clk/8/204        (  1 clock ) 
 299               			#endif                                                                                 
 300               			#ifdef KER_TOSC_TICK_100MS                                                             
 301               			LDI   R18                , 0x03                   ;10Hz->clk/32/102       (  1 clock ) 
 302               			#endif                                                                                 
 303               			#ifdef KER_TOSC_TICK_250MS                                                             
 304               			LDI   R18                , 0x04                   ;4Hz->clk/64/128        (  1 clock ) 
 305               			#endif                                                                                 
 306               			#ifdef KER_TOSC_TICK_500MS                                                             
 307               			LDI   R18                , 0x05                   ;2Hz->clk/128/128       (  1 clock ) 
 308               			#endif                                                                                 
 309               			#ifdef KER_TOSC_TICK_1000MS                                                            
 310               			LDI   R18                , 0x06                   ;1Hz->clk/256/128       (  1 clock ) 
 311               			#endif                                                                                 
 312               			STS   SRTCCR2B           , R18                    ;set val to TCCR2B      (  2 clocks) 
 313               			LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
 314               			STS   SRTCNT2            , R18                    ;set val to TCNT2       (  2 clocks) 
 315               		_KER_TC2_AUB\@:                                                                            
 316               		    LDS   R18                , SRASSR                 ;load ASSR              (  2 clocks) 
 317               	        ANDI  R18                , 0x02                   ;check bit TCR2AUB      (  1 clock ) 
 318               			BRNE  _KER_TC2_AUB\@                              ;wait until AUB cleared (  2 clocks) 
 319               		_KER_TC2_BUB\@:                                                                            
 320               		    LDS   R18                , SRASSR                 ;load ASSR              (  2 clocks) 
 321               	        ANDI  R18                , 0x01                   ;check bit TCR2BUB      (  1 clock ) 
 322               			BRNE  _KER_TC2_BUB\@                              ;wait until BUB cleared (  2 clocks) 
 323               		_KER_OC2_AUB\@:                                                                            
 324               		    LDS   R18                , SRASSR                 ;load ASSR              (  2 clocks) 
 325               	        ANDI  R18                , 0x08                   ;check bit OR2AUB       (  1 clock ) 
 326               			BRNE  _KER_OC2_AUB\@                              ;wait until AUB cleared (  2 clocks) 
 327               		_KER_OC2_BUB\@:                                                                            
 328               		    LDS   R18                , SRASSR                 ;load ASSR              (  2 clocks) 
 329               	        ANDI  R18                , 0x04                   ;check bit OCR2BUB      (  1 clock ) 
 330               			BRNE  _KER_OC2_BUB\@                              ;wait until BUB cleared (  2 clocks) 
 331               		_KER_TC2_UB\@:                                                                             
 332               		    LDS   R18                , SRASSR                 ;load ASSR              (  2 clocks) 
 333               	        ANDI  R18                , 0x10                   ;check bit TCNT2UB      (  1 clock ) 
 334               			BRNE  _KER_TC2_UB\@                               ;wait until BUB cleared (  2 clocks) 
 335               		_KER_TC2_TOV2\@:                                                                           
 336               		    LDS   R18                , SRTIFR2                ;load TIFR2             (  2 clocks) 
 337               	        ANDI  R18                , 0x01                   ;check bit TOV2         (  1 clock ) 
 338               	        BREQ  _KER_TC2_OCF2A\@                            ;bit cleared, jump next (  2 clocks) 
 339               			LDI   R18                , 0x01                   ;set bit                (  1 clock ) 
 340               			STS   SRTIFR2            , R18                    ;set val                (  2 clocks) 
 341               	    _KER_TC2_OCF2A\@:                                                                          
 342               		    LDS   R18                , SRTIFR2                ;load TIFR2             (  2 clocks) 
 343               	        ANDI  R18                , 0x02                   ;check bit OCF2A        (  1 clock ) 
 344               	        BREQ  _KER_TC2_OCF2B\@                            ;bit cleared, jump next (  2 clocks) 
 345               			LDI   R18                , 0x02                   ;set bit                (  1 clock ) 
 346               			STS   SRTIFR2            , R18                    ;set val                (  2 clocks) 
 347               		_KER_TC2_OCF2B\@:                                                                          
 348               		    LDS   R18                , SRTIFR2                ;load TIFR2             (  2 clocks) 
 349               	        ANDI  R18                , 0x04                   ;check bit OCF2B        (  1 clock ) 
 350               	        BREQ  _KER_TC2_INTEN\@                            ;bit cleared, jump next (  2 clocks) 
 351               			LDI   R18                , 0x04                   ;set bit                (  1 clock ) 
 352               			STS   SRTIFR2            , R18                    ;set val                (  2 clocks) 
 353               	    _KER_TC2_INTEN\@:                                                                          
 354               			LDI   R18                , 0x02                   ;set TOIE2 bit          (  1 clock ) 
 355               			STS   SRTIMSK2           , R18                    ;set val to TIMSK2      (  2 clocks) 
 356               	        SEI                                               ;force enable interrupt (  1 clock ) 
 357               			#endif                                                                                 
 358               	.endm                                                                                          
 359               	;;==============================debug pin operation init end================================;; 
 360               	
 361               	
 362               	
 363               	
 364               	
 365               	;;============================debug pin operation init starting=============================;; 
 366               	;used registers          : None                                                                
 367               	;arg registers           : None                                                                
 368               	;return registers        : None                                                                
 369               	;unsafe access registers : None                                                                
 370               	.macro  KER_DEBUG_PIN_INIT                                ;total 0.5uS @8MHz      (  4 clocks) 
 371               	        #ifdef KER_DBG_ENABLE                                                                  
 372               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 373               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 374               			#endif                                                                                 
 375               	.endm                                                                                          
 376               	;;==============================debug pin operation init end================================;; 
 377               	
 378               	
 379               	
 380               	
 381               	
 382               	;;===========================debug pin operation set starting===============================;; 
 383               	;used registers          : None                                                                
 384               	;arg registers           : None                                                                
 385               	;return registers        : None                                                                
 386               	;unsafe access registers : None                                                                
 387               	.macro  KER_DEBUG_PIN_SET                                 ;total 0.25uS @8MHz     (  2 clocks) 
 388               	        #ifdef KER_DBG_ENABLE                                                                  
 389               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 390               			#endif                                                                                 
 391               	.endm                                                                                          
 392               	;;==============================debug pin operation set end=================================;; 
 393               	
 394               	
 395               	
 396               	
 397               	
 398               	;;===========================debug pin operation clear starting=============================;; 
 399               	;used registers          : None                                                                
 400               	;arg registers           : None                                                                
 401               	;return registers        : None                                                                
 402               	;unsafe access registers : None                                                                
 403               	.macro  KER_DEBUG_PIN_CLEAR                               ;total 0.25uS @8MHz     (  2 clocks) 
 404               	        #ifdef KER_DBG_ENABLE                                                                  
 405               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 406               			#endif                                                                                 
 407               	.endm                                                                                          
 408               	;;==============================debug pin operation clear end===============================;; 
 409               	
 410               	
 411               	
 412               	
 413               	
 414               	;;==============================reload counter value starting===============================;; 
 415               	;used registers          : R18                                                                 
 416               	;arg registers           : None                                                                
 417               	;return registers        : None                                                                
 418               	;unsafe access registers : R18                                                                 
 419               	.macro  KER_COUNTER_RELOAD                                ;total 0.5uS @8MHz      (  4 clocks) 
 420               	        LDS   R18                , KerBase+OFB_RLD        ;load reload value      (  2 clocks) 
 421               			STS   SRTCNT0            , R18                    ;Set value to TCNT0     (  2 clocks) 
 422               	.endm                                                                                          
 423               	;;=================================reload counter value end=================================;; 
 424               	
 425               	
 426               	
 427               	
 428               	
 429               	;;=================================save r0 & sreg starting==================================;; 
 430               	;used registers          : R0                                                                  
 431               	;arg registers           : None                                                                
 432               	;return registers        : None                                                                
 433               	;unsafe access registers : None                                                                
 434               	.macro  KER_SAVE_R0_SREG                                  ;total 0.63uS @8MHz     (  5 clocks) 
 435               	        PUSH  R0                                          ;save R0                (  2 clocks) 
 436               			IN    R0                 , IOSREG                 ;load SREG              (  1 clock ) 
 437               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 438               	.endm                                                                                          
 439               	;;====================================save r0 & sreg end====================================;; 
 440               	
 441               	
 442               	
 443               	
 444               	
 445               	;;===============================save r0, sreg & cli starting===============================;; 
 446               	;used registers          : R0                                                                  
 447               	;arg registers           : None                                                                
 448               	;return registers        : None                                                                
 449               	;unsafe access registers : None                                                                
 450               	.macro  KER_SAVE_R0_CLI_SREG                              ;total 0.75uS @8MHz     (  6 clocks) 
 451               	        PUSH  R0                                          ;push R0                (  2 clocks) 
 452               			IN    R0                 , IOSREG                 ;save SREG              (  1 clock ) 
 453               			CLI                                               ;clear interrupt        (  1 clock ) 
 454               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 455               	.endm                                                                                          
 456               	;;=================================save r0, sreg & cli end==================================;; 
 457               	
 458               	
 459               	
 460               	
 461               	
 462               	;;===================================save r1~r31 starting===================================;; 
 463               	;used registers          : R1~R31                                                              
 464               	;arg registers           : None                                                                
 465               	;return registers        : None                                                                
 466               	;unsafe access registers : None                                                                
 467               	.macro  KER_SAVE_R1_R31                                   ;total 7.88uS @8MHz     ( 63 clocks) 
 468               			PUSH  R1                                          ;save R1                (  2 clocks) 
 469               			CLR   R1                                          ;clear R1               (  1 clock ) 
 470               			PUSH  R2                                          ;save R2                (  2 clocks) 
 471               			PUSH  R3                                          ;save R3                (  2 clocks) 
 472               			PUSH  R4                                          ;save R4                (  2 clocks) 
 473               			PUSH  R5                                          ;save R5                (  2 clocks) 
 474               			PUSH  R6                                          ;save R6                (  2 clocks) 
 475               			PUSH  R7                                          ;save R7                (  2 clocks) 
 476               			PUSH  R8                                          ;save R8                (  2 clocks) 
 477               			PUSH  R9                                          ;save R9                (  2 clocks) 
 478               			PUSH  R10                                         ;save R10               (  2 clocks) 
 479               			PUSH  R11                                         ;save R11               (  2 clocks) 
 480               			PUSH  R12                                         ;save R12               (  2 clocks) 
 481               			PUSH  R13                                         ;save R13               (  2 clocks) 
 482               			PUSH  R14                                         ;save R14               (  2 clocks) 
 483               			PUSH  R15                                         ;save R15               (  2 clocks) 
 484               			PUSH  R16                                         ;save R16               (  2 clocks) 
 485               			PUSH  R17                                         ;save R17               (  2 clocks) 
 486               			PUSH  R18                                         ;save R18               (  2 clocks) 
 487               			PUSH  R19                                         ;save R19               (  2 clocks) 
 488               			PUSH  R20                                         ;save R20               (  2 clocks) 
 489               			PUSH  R21                                         ;save R21               (  2 clocks) 
 490               			PUSH  R22                                         ;save R22               (  2 clocks) 
 491               			PUSH  R23                                         ;save R23               (  2 clocks) 
 492               			PUSH  R24                                         ;save R24               (  2 clocks) 
 493               			PUSH  R25                                         ;save R25               (  2 clocks) 
 494               			PUSH  R26                                         ;save R26               (  2 clocks) 
 495               			PUSH  R27                                         ;save R27               (  2 clocks) 
 496               			PUSH  R28                                         ;save R28               (  2 clocks) 
 497               			PUSH  R29                                         ;save R29               (  2 clocks) 
 498               			PUSH  R30                                         ;save R30               (  2 clocks) 
 499               			PUSH  R31                                         ;save R31               (  2 clocks) 
 500               	.endm                                                                                          
 501               	;;======================================save r1~r31 end=====================================;; 
 502               	
 503               	
 504               	
 505               	
 506               	
 507               	;;==============================context save handler starting===============================;; 
 508               	;used registers          : R0~R31                                                              
 509               	;arg registers           : None                                                                
 510               	;return registers        : None                                                                
 511               	;unsafe access registers : None                                                                
 512               	.macro  KER_CONTEXT_SAVE_HANDLER                          ;total 8.5uS @8MHz      ( 68 clocks) 
 513               	        KER_SAVE_R0_SREG                                  ;save r0, sreg          (  5 clocks) 
 514               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 515               	.endm                                                                                          
 516               	;;=================================context save handler end=================================;; 
 517               	
 518               	
 519               	
 520               	
 521               	
 522               	;;===============================context save thread starting===============================;; 
 523               	;used registers          : R0~R31                                                              
 524               	;arg registers           : None                                                                
 525               	;return registers        : None                                                                
 526               	;unsafe access registers : None                                                                
 527               	.macro  KER_CONTEXT_SAVE_THREAD                           ;total 8.63uS @8MHz     ( 69 clocks) 
 528               	        KER_SAVE_R0_CLI_SREG                              ;save r0, sreg          (  6 clocks) 
 529               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 530               	.endm                                                                                          
 531               	;;==================================context save thread end=================================;; 
 532               	
 533               	
 534               	
 535               	
 536               	
 537               	
 538               	;;================================restore r0 & sreg starting================================;; 
 539               	;used registers          : R0                                                                  
 540               	;arg registers           : None                                                                
 541               	;return registers        : None                                                                
 542               	;unsafe access registers : None                                                                
 543               	.macro  KER_RESTORE_R0_SREG                               ;total 0.63uS @8MHz     (  5 clocks) 
 544               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 545               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 546               			POP   R0                                          ;restore R0             (  2 clocks) 
 547               	.endm                                                                                          
 548               	;;==================================restore r0 & sreg end===================================;; 
 549               	
 550               	
 551               	
 552               	
 553               	
 554               	;;==============================restore r0, sreg & sei starting=============================;; 
 555               	;used registers          : R0                                                                  
 556               	;arg registers           : None                                                                
 557               	;return registers        : None                                                                
 558               	;unsafe access registers : None                                                                
 559               	.macro  KER_RESTORE_R0_SREG_SEI                           ;total 0.75uS @8MHz     (  6 clocks) 
 560               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 561               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 562               			POP   R0                                          ;restore R0             (  2 clocks) 
 563               			SEI                                               ;enable interrupt       (  1 clock ) 
 564               	.endm                                                                                          
 565               	;;===============================restore r0, sreg & sei end=================================;; 
 566               	
 567               	
 568               	
 569               	
 570               	
 571               	;;=================================restore r1~r31 starting==================================;; 
 572               	;used registers          : R1~R31                                                              
 573               	;arg registers           : None                                                                
 574               	;return registers        : None                                                                
 575               	;unsafe access registers : None                                                                
 576               	.macro  KER_RESTORE_R1_R31                                ;total 8.38uS @8MHz     ( 62 clocks) 
 577               			POP   R31                                         ;restore R31            (  2 clocks) 
 578               			POP   R30                                         ;restore R30            (  2 clocks) 
 579               			POP   R29                                         ;restore R29            (  2 clocks) 
 580               			POP   R28                                         ;restore R28            (  2 clocks) 
 581               			POP   R27                                         ;restore R27            (  2 clocks) 
 582               			POP   R26                                         ;restore R26            (  2 clocks) 
 583               			POP   R25                                         ;restore R25            (  2 clocks) 
 584               			POP   R24                                         ;restore R24            (  2 clocks) 
 585               			POP   R23                                         ;restore R23            (  2 clocks) 
 586               			POP   R22                                         ;restore R22            (  2 clocks) 
 587               			POP   R21                                         ;restore R21            (  2 clocks) 
 588               			POP   R20                                         ;restore R20            (  2 clocks) 
 589               			POP   R19                                         ;restore R19            (  2 clocks) 
 590               			POP   R18                                         ;restore R18            (  2 clocks) 
 591               			POP   R17                                         ;restore R17            (  2 clocks) 
 592               			POP   R16                                         ;restore R16            (  2 clocks) 
 593               			POP   R15                                         ;restore R15            (  2 clocks) 
 594               			POP   R14                                         ;restore R14            (  2 clocks) 
 595               			POP   R13                                         ;restore R13            (  2 clocks) 
 596               			POP   R12                                         ;restore R12            (  2 clocks) 
 597               			POP   R11                                         ;restore R11            (  2 clocks) 
 598               			POP   R10                                         ;restore R10            (  2 clocks) 
 599               			POP   R9                                          ;restore R9             (  2 clocks) 
 600               			POP   R8                                          ;restore R8             (  2 clocks) 
 601               			POP   R7                                          ;restore R7             (  2 clocks) 
 602               			POP   R6                                          ;restore R6             (  2 clocks) 
 603               			POP   R5                                          ;restore R5             (  2 clocks) 
 604               			POP   R4                                          ;restore R4             (  2 clocks) 
 605               			POP   R3                                          ;restore R3             (  2 clocks) 
 606               			POP   R2                                          ;restore R2             (  2 clocks) 
 607               			POP   R1                                          ;restore R1             (  2 clocks) 
 608               	.endm                                                                                          
 609               	;;====================================restore r1~r31 end====================================;; 
 610               	
 611               	
 612               	
 613               	
 614               	
 615               	;;=============================context restore handler starting=============================;; 
 616               	;used registers          : R0~R31                                                              
 617               	;arg registers           : None                                                                
 618               	;return registers        : None                                                                
 619               	;unsafe access registers : None                                                                
 620               	.macro  KER_CONTEXT_RESTORE_HANDLER                       ;total 8.38uS @8MHz     ( 67 clocks) 
 621               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 622               			KER_RESTORE_R0_SREG                               ;restore r0, sreg       (  5 clocks) 
 623               	.endm                                                                                          
 624               	;;===============================context restore handler end================================;; 
 625               	
 626               	
 627               	
 628               	
 629               	
 630               	;;=============================context restore thread starting==============================;; 
 631               	;used registers          : R0~R31                                                              
 632               	;arg registers           : None                                                                
 633               	;return registers        : None                                                                
 634               	;unsafe access registers : None                                                                
 635               	.macro  KER_CONTEXT_RESTORE_THREAD                        ;total 8.75uS @8MHz     ( 68 clocks) 
 636               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 637               			KER_RESTORE_R0_SREG_SEI                           ;restore r0, sreg       (  6 clocks) 
 638               	.endm                                                                                          
 639               	;;================================context restore thread end================================;; 
 640               	
 641               	
 642               	
 643               	
 644               	
 645               	;;==============================fetch current task id starting==============================;; 
 646               	;used registers          : R20                                                                 
 647               	;arg registers           : None                                                                
 648               	;return registers        : R20 (Current task id)                                               
 649               	;unsafe access registers : R20                                                                 
 650               	.macro  KER_FETCH_CURR_TID                                ;total 0.25uS @8MHz     (  2 clocks) 
 651               	        LDS   R20                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 652               	.endm                                                                                          
 653               	;;================================fetch current task id end=================================;; 
 654               	
 655               	
 656               	
 657               	
 658               	
 659               	;;==================================fetch ntask starting====================================;; 
 660               	;used registers          : R21                                                                 
 661               	;arg registers           : None                                                                
 662               	;return registers        : R21 (ntask)                                                         
 663               	;unsafe access registers : R21                                                                 
 664               	.macro  KER_FETCH_NTASK                                   ;total 0.25uS @8MHz     (  2 clocks) 
 665               	        LDS   R21                , KerBase+OFB_NTSK       ;fetch task_id          (  2 clocks) 
 666               	.endm                                                                                          
 667               	;;====================================fetch ntask end=======================================;; 
 668               	
 669               	
 670               	
 671               	
 672               	
 673               	;;=========================calculate offset addr in words starting==========================;; 
 674               	;used registers          : R18, R30(ZL), R31(ZH)                                               
 675               	;arg registers           : R30(ZL), R31(ZH)                                                    
 676               	;return registers        : R30(ZL), R31(ZH)                                                    
 677               	;unsafe access registers : R18, R30(ZL), R31(ZH)                                               
 678               	.macro  KER_CALC_ADDR_OFF_WORD                            ;total 0.75uS @8MHz     (  6 clocks) 
 679               	        LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 680               			LSL   R18                                         ;left shift to multiply (  1 clock ) 
 681               			ADD   ZL                 , R18                    ;add offset to array    (  1 clock ) 
 682               			LDI   R18                , 0x00                   ;clear for carry prop   (  1 clock ) 
 683               			ADC   ZH                 , R18                    ;add carry if any       (  1 clock ) 
 684               	.endm                                                                                          
 685               	;;=============================calculate offset addr in words end===========================;; 
 686               	
 687               	
 688               	
 689               	
 690               	
 691               	;;=========================calculate offset addr in bytes starting==========================;; 
 692               	;used registers          : R18, R30(ZL), R31(ZH)                                               
 693               	;arg registers           : R30(ZL), R31(ZH)                                                    
 694               	;return registers        : R30(ZL), R31(ZH)                                                    
 695               	;unsafe access registers : R18, R30(ZL), R31(ZH)                                               
 696               	.macro  KER_CALC_ADDR_OFF_BYTES                           ;total 0.63uS @8MHz     (  5 clocks) 
 697               	        LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 698               			ADD   ZL                 , R18                    ;add offset to array    (  1 clock ) 
 699               			LDI   R18                , 0x00                   ;clear for carry prop   (  1 clock ) 
 700               			ADC   ZH                 , R18                    ;add carry if any       (  1 clock ) 
 701               	.endm                                                                                          
 702               	;;=============================calculate offset addr in bytes end===========================;; 
 703               	
 704               	
 705               	
 706               	
 707               	
 708               	;;===============================save current task sp starting==============================;; 
 709               	;used registers          : R18, R19, R30(ZL), R31(ZH)                                          
 710               	;arg registers           : None                                                                
 711               	;return registers        : None                                                                
 712               	;unsafe access registers : R18, R19, R30(ZL), R31(ZH)                                          
 713               	.macro  KER_SAVE_CURR_TASK_SP                             ;total 1.75uS @8MHz     ( 14 clocks) 
 714               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 715               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 716               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 717               			IN    R18                , IOSPL                  ;fetch SPL0             (  1 clock ) 
 718               			IN    R19                , IOSPH                  ;fetch SPH0             (  1 clock ) 
 719               			STD   Z+0                , R18                    ;store SPL at ZP+0      (  2 clocks) 
 720               			STD   Z+1                , R19                    ;store SPH at ZP+1      (  2 clocks) 
 721               	.endm                                                                                          
 722               	;;================================save current task sp end==================================;; 
 723               	
 724               	
 725               	
 726               	
 727               	
 728               	;;==============================load next task id starting==================================;; 
 729               	;used registers          : R18, R19                                                            
 730               	;arg registers           : None                                                                
 731               	;return registers        : None                                                                
 732               	;unsafe access registers : R18, R19                                                            
 733               	.macro  KER_LOAD_NEXT_TASK_ID                             ;total 1.63uS @8MHz     ( 13 clocks) 
 734               			LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 735               			INC   R18                                         ;increment task_id      (  1 clock ) 
 736               			LDS   R19                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 737               		_MOD_CONT\@:                                          ;use local label                     
 738               		    CP    R18                , R19                    ;compare tid with ntask (  1 clock ) 
 739               			BRLO  _MOD_DONE\@                                 ;if tid<ntask, done     (  2 clocks) 
 740               			SUB   R18                , R19                    ;subtract ntask from tid(  1 clock ) 
 741               			RJMP  _MOD_CONT\@                                 ;go to loop start       (  2 clocks) 
 742               		_MOD_DONE\@:                                          ;use local label                     
 743               		    STS   KerBase+OFB_TID    , R18                    ;save task_id%ntask     (  2 clocks) 
 744               	.endm                                                                                          
 745               	;;=================================load next task id end====================================;; 
 746               	
 747               	
 748               	
 749               	
 750               	
 751               	;;==============================increment tick counter starting=============================;; 
 752               	;used registers          : R18, R19                                                            
 753               	;arg registers           : None                                                                
 754               	;return registers        : None                                                                
 755               	;unsafe access registers : R18, R19                                                            
 756               	.macro  KER_TICK_INCREMENT                                ;total 3.25uS @8MHz     ( 26 clocks) 
 757               			LDS   R18                , KerBase+OFB_TICK0      ;load Byte0             (  2 clocks) 
 758               			INC   R18                                         ;add 1 with Byte0       (  1 clock ) 
 759               			STS   KerBase+OFB_TICK0  , R18                    ;set Byte0              (  2 clocks) 
 760               			LDI   R19                , 0x00                   ;clear reg              (  1 clock ) 
 761               			LDS   R18                , KerBase+OFB_TICK1      ;load Byte1             (  2 clocks) 
 762               			ADC   R18                , R19                    ;add carry with Byte1   (  1 clock ) 
 763               			STS   KerBase+OFB_TICK1  , R18                    ;set Byte1              (  2 clocks) 
 764               			LDS   R18                , KerBase+OFB_TICK2      ;load Byte2             (  2 clocks) 
 765               			ADC   R18                , R19                    ;add carry with Byte2   (  1 clock ) 
 766               			STS   KerBase+OFB_TICK2  , R18                    ;set Byte2              (  2 clocks) 
 767               			LDS   R18                , KerBase+OFB_TICK3      ;load Byte3             (  2 clocks) 
 768               			ADC   R18                , R19                    ;add carry with Byte3   (  1 clock ) 
 769               			STS   KerBase+OFB_TICK3  , R18                    ;set Byte3              (  2 clocks) 
 770               			LDS   R18                , KerBase+OFB_TICK4      ;load Byte4             (  2 clocks) 
 771               			ADC   R18                , R19                    ;add carry with Byte4   (  1 clock ) 
 772               			STS   KerBase+OFB_TICK4  , R18                    ;set Byte4              (  2 clocks) 
 773               	.endm                                                                                          
 774               	;;=================================increment tick counter end===============================;; 
 775               	
 776               	
 777               	
 778               	
 779               	
 780               	;;==============================load task id & sp starting==================================;; 
 781               	;used registers          : R18, R19, R30(ZL), R31(ZH)                                          
 782               	;arg registers           : None                                                                
 783               	;return registers        : None                                                                
 784               	;unsafe access registers : R18, R19, R30(ZL), R31(ZH)                                          
 785               	.macro  KER_LOAD_TASK_ID_AND_SP                           ;total 1.75uS @8MHz     ( 14 clocks) 
 786               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 787               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 788               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 789               			LDD   R18                , Z+0                    ;load SPL at ZP         (  2 clocks) 
 790               			LDD   R19                , Z+1                    ;load SPH at ZP         (  2 clocks) 
 791               			OUT   IOSPL              , R18                    ;load SPL0              (  1 clock ) 
 792               			OUT   IOSPH              , R19                    ;load SPH0              (  1 clock ) 
 793               	.endm                                                                                          
 794               	;;=================================load task id & sp end====================================;; 
 795               	
 796               	
 797               	
 798               	
 799               	
 800               	;;================================push msp & zp starting====================================;; 
 801               	;used registers          : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 802               	;arg registers           : None                                                                
 803               	;return registers        : None                                                                
 804               	;unsafe access registers : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 805               	.macro  KER_PUSH_MSP_ZP                                   ;total 2.25uS @8MHz     ( 18 clocks) 
 806               	        LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 807               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 808               			IN    R18                , IOSPL                  ;copy                   (  1 clock ) 
 809               			IN    R19                , IOSPH                  ;copy                   (  1 clock ) 
 810               			ST    X+                 , R18                    ;store main SPL         (  2 clocks) 
 811               	        ST    X+                 , R19                    ;store main SPH         (  2 clocks) 
 812               			ST    X+                 , ZL                     ;store main ZL          (  2 clocks) 
 813               			ST    X+                 , ZH                     ;store main ZH          (  2 clocks) 
 814               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 815               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 816               	.endm                                                                                          
 817               	;;===================================push msp & zp end======================================;; 
 818               	
 819               	
 820               	
 821               	
 822               	
 823               	;;=================================pop msp & zp starting====================================;; 
 824               	;used registers          : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 825               	;arg registers           : None                                                                
 826               	;return registers        : None                                                                
 827               	;unsafe access registers : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 828               	.macro  KER_POP_MSP_ZP                                    ;total 2.25uS @8MHz     ( 18 clocks) 
 829               			LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 830               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 831               			LD    ZH                 , -X                     ;load ZH                (  2 clocks) 
 832               			LD    ZL                 , -X                     ;load ZL                (  2 clocks) 
 833               			LD    R19                , -X                     ;load main SPH          (  2 clocks) 
 834               			LD    R18                , -X                     ;load main SPL          (  2 clocks) 
 835               			OUT   IOSPL              , R18                    ;set SPL                (  1 clock ) 
 836               			OUT   IOSPH              , R19                    ;set SPH                (  1 clock ) 
 837               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 838               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 839               	.endm                                                                                          
 840               	;;====================================pop msp & zp end======================================;; 
 841               	
 842               	
 843               	
 844               	
 845               	
 846               	;;============================sleep timeout management starting=============================;; 
 847               	;used registers          : R18, R19, R20, R24, R30(ZL), R31(ZH)                                
 848               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 849               	;return registers        : R24 (READY/BLOCKED/EXECUTING/SUSPENDED/CONS_LAT)                    
 850               	;unsafe access registers : R18, R19, R20, R24, R30(ZL), R31(ZH)                                
 851               	.macro  KER_SLP_TIME_MGNT                                 ;total 6.50uS @8MHz     ( 52 clocks) 
 852               			LDI   ZL                 , lo8(KerSchSlp)         ;fetch base pos low     (  1 clock ) 
 853               			LDI   ZH                 , hi8(KerSchSlp)         ;fetch base pos high    (  1 clock ) 
 854               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 855               			;fetch current value from ram, if val=0, skip decrement                                
 856               	        LDD   R18                , Z+0                    ;load val low byte      (  2 clocks) 
 857               			LDD   R19                , Z+1                    ;load val high byte     (  2 clocks) 
 858               			MOV   R20                , R18                    ;copy                   (  1 clock ) 
 859               			OR    R20                , R19                    ;or high & low bytes    (  1 clock ) 
 860               			BREQ  _VAL_NULL\@                                 ;val=0, save sts        (  2 clocks) 
 861               	        CPI   R24                , SCH_MODE_THREAD        ;if arg=1, thread mode  (  1 clock ) 
 862               			BREQ  _VAL_NOT_NULL\@                             ;no need to dec val     (  2 clocks) 
 863               			;R19:R18 contains 16 bit sleep timer val, decrease val by 1                            
 864               			LDI   R20                , 0x01                   ;set val 1              (  1 clock ) 
 865               	        SUB   R18                , R20                    ;subtract low byte      (  1 clock ) 
 866               			LDI   R20                , 0x00                   ;clear                  (  1 clock ) 
 867               			SBC   R19                , R20                    ;subtract carry if any  (  1 clock ) 
 868               			;store new value                                                                       
 869               			STD   Z+0                , R18                    ;store low byte         (  2 clocks) 
 870               			STD   Z+1                , R19                    ;store low byte         (  2 clocks) 
 871               			MOV   R20                , R18                    ;copy                   (  1 clock ) 
 872               			OR    R20                , R19                    ;or high & low bytes    (  1 clock ) 
 873               			BRNE  _VAL_NOT_NULL\@                             ;val!=0                 (  2 clocks) 
 874               		_VAL_NULL\@:                                                                               
 875               		    ;find ram address for status                                                           
 876               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 877               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 878               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 879               			;update flag as task is ready                                                          
 880               			LDI   R24                , TASK_READY             ;set TASK_READY         (  1 clock ) 
 881               			ST    Z                  , R24                    ;update flag            (  2 clocks) 
 882               			RJMP  _EXIT_SLP_TIME\@                            ;jump to exit           (  2 clocks) 
 883               	    _VAL_NOT_NULL\@:                                                                           
 884               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 885               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 886               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 887               		    LD    R24                , Z                      ;return sts             (  2 clocks) 
 888               	    _EXIT_SLP_TIME\@:                                                                          
 889               	.endm                                                                                          
 890               	;;============================sleep timeout management end==================================;; 
 891               	
 892               	
 893               	
 894               	
 895               	
 896               	;;============================current task priority starting================================;; 
 897               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 898               	;arg registers           : None                                                                
 899               	;return registers        : R24 (Current task priority)                                         
 900               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 901               	.macro  KER_CURR_TASK_PRIO                                ;total 1.13uS @8MHz     (  9 clocks) 
 902               			LDI    ZL                , lo8(KerSchPr)          ;load low addr          (  1 clock ) 
 903               			LDI    ZH                , hi8(KerSchPr)          ;load high addr         (  1 clock ) 
 904               			LDI    R18               , 0x00                   ;clear reg, for carry   (  1 clock ) 
 905               			LDS    R24               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 906               	        ADD    ZL                , R24                    ;add low addr           (  1 clock ) 
 907               			ADC    ZH                , R18                    ;add carry if any       (  1 clock ) 
 908               			LD     R24               , Z                      ;load current tid prio  (  2 clocks) 
 909               	.endm                                                                                          
 910               	;;==============================current task priority end===================================;; 
 911               	
 912               	
 913               	
 914               	
 915               	
 916               	;;================================run scheduler starting====================================;; 
 917               	;used registers          : R18, R19, R20, R21, R24, R25, R30(ZL), R31(ZH)                      
 918               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 919               	;return registers        : None                                                                
 920               	;unsafe access registers : R18, R19, R20, R21, R24, R25, R30(ZL), R31(ZH)                      
 921               	.macro  KER_RUN_SCHEDULER                                 ;total 13.25uS @8MHz    (106 clocks) 
 922               			LDI    R18               , 0xFF                   ;set 0xff               (  1 clock ) 
 923               			STS    KerBase+OFB_LPR   , R18                    ;lowest priority        (  2 clocks) 
 924               			LDI    R18               , 0x00                   ;start from 0           (  1 clock ) 
 925               			STS    KerBase+OFB_PTID  , R18                    ;highest prio tid=0     (  2 clocks) 
 926               			MOV    R21               , R24                    ;copy sch mode          (  1 clock ) 
 927               		_KER_SCH_LOOP\@:                                                                           
 928               		    ;store task id to run from KER_DEC_SLP_TIMEOUT                                         
 929               			STS    KerBase+OFB_TID   , R18                    ;store task id          (  2 clocks) 
 930               	        ;sleep time decrement, update ready/blocked status                                     
 931               			MOV    R24               , R21                    ;restore sch mode       (  1 clock ) 
 932               			KER_SLP_TIME_MGNT                                 ;update return vars     ( 52 clocks) 
 933               	        CPI    R24               , TASK_READY             ;compare                (  1 clock ) 
 934               	        BREQ   _KER_CALC_PRIO\@                           ;calc priority if ready (  2 clocks) 
 935               			CPI    R24               , TASK_CONS_LAT          ;compare                (  1 clock ) 
 936               	        BREQ   _KER_CALC_PRIO\@                           ;calc priority if c_lat (  2 clocks) 
 937               	        RJMP   _KER_SCH_NEXT\@                            ;skip if !ready|c_lat   (  2 clocks) 
 938               		_KER_CALC_PRIO\@:                                                                          
 939               			KER_CURR_TASK_PRIO                                ;get task prio ->R24    (  9 clocks) 
 940               	        ;compare current task priority with lowest priority found so far                       
 941               			LDS    R18               , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 942               			CP     R24               , R18                    ;compare                (  1 clock ) 
 943               			BRSH   _KER_SCH_NEXT\@                            ;if prio>=lowest prio   (  2 clocks) 
 944               			;found new lowest priority                                                             
 945               			STS    KerBase+OFB_LPR   , R24                    ;save lowest priority   (  2 clocks) 
 946               			LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 947               			STS    KerBase+OFB_PTID  , R18                    ;save lowest priority   (  2 clocks) 
 948:kernel.S      ****                                                                                                
 949:kernel.S      ****     _KER_SCH_NEXT\@:                                                                           
 950:kernel.S      **** 	    LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 951:kernel.S      **** 		INC    R18                                        ;increment by 1         (  1 clock ) 
 952:kernel.S      **** 		LDS    R19               , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 953:kernel.S      **** 		CP     R18               , R19                    ;compare with ntask     (  2 clocks) 
 954:kernel.S      **** 		BRSH   _KER_SCH_EXIT\@                            ;if task_id>=ntask      (  2 clocks) 
 955:kernel.S      **** 		RJMP   _KER_SCH_LOOP\@                            ;jump to entry          (  2 clocks) 
 956:kernel.S      **** 	_KER_SCH_EXIT\@:                                                                           
 957:kernel.S      ****         LDS    R18               , KerBase+OFB_PTID       ;load high prio task id (  2 clocks) 
 958:kernel.S      **** 		STS    KerBase+OFB_TID   , R18                    ;for test only          (  2 clocks) 
 959:kernel.S      **** .endm                                                                                          
 960:kernel.S      **** ;;===================================run scheduler end======================================;; 
 961:kernel.S      **** 
 962:kernel.S      **** 
 963:kernel.S      **** 
 964               	
 965               	
 966               	;;================================calc cpu usage starting===================================;; 
 967               	;used registers          : R18, R19                                                            
 968               	;arg registers           : None                                                                
 969               	;return registers        : None                                                                
 970               	;unsafe access registers : R18, R19                                                            
 971               	.macro  KER_CPU_USAGE                                     ;total 3.25uS @8MHz     ( 26 clocks) 
 972               	        ;check if current target task is idle task or not                                      
 973               	        LDS    R18               , KerBase+OFB_TID        ;load target task_id    (  2 clocks) 
 974               			TST    R18                                        ;check if idle task     (  1 clock ) 
 975               			BREQ   _KER_USG_TICK\@                            ;task_id=idle, skip     (  2 clocks) 
 976               			LDS    R18               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 977               			INC    R18                                        ;inc active tick cnt    (  1 clock ) 
 978               			STS    KerBase+OFB_UATC  , R18                    ;store new val          (  2 clocks) 
 979               		_KER_USG_TICK\@:                                                                           
 980               			LDS    R18               , KerBase+OFB_UTC        ;load usage tick cnt    (  2 clocks) 
 981               			INC    R18                                        ;increment tick cnt     (  1 clock ) 
 982               			CPI    R18               , 100                    ;compare with 100       (  1 clock ) 
 983               			BRLO   _KER_USG_UTC_SV\@                          ;val<100, save new val  (  2 clocks) 
 984               			LDI    R18               , 0x00                   ;val>=100, roll back    (  1 clock ) 
 985               			LDS    R19               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 986               			STS    KerBase+OFB_USAGE , R19                    ;store usage            (  2 clocks) 
 987               			LDI    R19               , 0x00                   ;clear reg              (  1 clock ) 
 988               			STS    KerBase+OFB_UATC  , R19                    ;clear active tick cnt  (  2 clocks) 
 989               		_KER_USG_UTC_SV\@:                                                                         
 990               			STS    KerBase+OFB_UTC   , R18                    ;store new val          (  2 clocks) 
 991               	.endm                                                                                          
 992               	;;===================================calc cpu usage end=====================================;; 
 993               	
 994               	
 995               	
 996               	
 997               	
 998               	;;===========================kernel disable analog domain starting==========================;; 
 999               	;used registers          : None                                                                
 1000               	;arg registers           : None                                                                
 1001               	;return registers        : None                                                                
 1002               	;unsafe access registers : None                                                                
 1003               	.macro KER_DISABLE_ANALOG_DOMAIN                          ;total 0.75uS @8MHz     ( 10 clocks) 
 1004               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 1005               			LDS   R18                , SRADCSRA               ;load ADCSRA            (  2 clocks) 
 1006               			ANDI  R18                , 0xEF                   ;clear ADEN             (  1 clock ) 
 1007               			STS   SRADCSRA           , R18                    ;set val                (  2 clocks) 
 1008               			LDS   R18                , SRACSR                 ;load ACSR              (  2 clocks) 
 1009               			ORI   R18                , 0x80                   ;set ACD                (  1 clock ) 
 1010               			STS   SRACSR             , R18                    ;set val                (  2 clocks) 
 1011               		#endif                                                                                     
 1012               	.endm                                                                                          
 1013               	;;=============================kernel disable analog domain end=============================;; 
 1014               	
 1015               	
 1016               	
 1017               	
 1018               	
 1019               	;;===============================kernel sleep config starting===============================;; 
 1020               	;used registers          : R18                                                                 
 1021               	;arg registers           : None                                                                
 1022               	;return registers        : None                                                                
 1023               	;unsafe access registers : R18                                                                 
 1024               	.macro KER_SLEEP_INIT                                     ;total 0.63uS @8MHz     (  5 clocks) 
 1025               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 1026               	        #ifdef KER_SLEEP_MODE_IDLE                                                             
 1027               			LDI   R18                , 0x00                   ;set SM[2:0] val        (  1 clock ) 
 1028               			#endif                                                                                 
 1029               	                                                                                               
 1030               			#ifdef KER_SLEEP_MODE_ADC_NR                                                           
 1031               			LDI   R18                , 0x02                   ;set SM[2:0] val        (  1 clock ) 
 1032               			#endif
 1033               	                                                                                               
 1034               			#ifdef KER_SLEEP_MODE_POWER_DOWN                                                       
 1035               			LDI   R18                , 0x04                   ;set SM[2:0] val        (  1 clock ) 
 1036               	        #endif                                                                                 
 1037               			                                                                                       
 1038               			#ifdef KER_SLEEP_MODE_POWER_SAVE                                                       
 1039               			LDI   R18                , 0x06                   ;set SM[2:0] val        (  1 clock ) 
 1040               			#endif                                                                                 
 1041               		                                                                                           
 1042               			STS   SRSMCR             , R18                    ;set sleep control val  (  2 clocks) 
 1043               			STS   KerBase+OFB_SLCFG  , R18                    ;save sleep control val (  2 clocks) 
 1044               		#endif                                                                                     
 1045               	.endm                                                                                          
 1046               	;;================================kernel sleep config end===================================;; 
 1047               	
 1048               	
 1049               	
 1050               	
 1051               	
 1052               	;;==============================kernel enter sleep mode starting============================;; 
 1053               	;used registers          : None                                                                
 1054               	;arg registers           : None                                                                
 1055               	;return registers        : None                                                                
 1056               	;unsafe access registers : None                                                                
 1057               	.macro KER_ENTER_SLEEP                                    ;total 0.75uS @8MHz     (  6 clocks) 
 1058               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 1059               			LDS   R18                , SRSMCR                 ;load SMCR              (  2 clocks) 
 1060               			ORI   R18                , 0x01                   ;set SE bit             (  1 clock ) 
 1061               			STS   SRSMCR             , R18                    ;set val                (  2 clocks) 
 1062               			SLEEP                                             ;sleep cpu              (  1 clock ) 
 1063               		#endif                                                                                     
 1064               	.endm                                                                                          
 1065               	;;================================kernel enter sleep mode end===============================;; 
 1066               	
 1067               	
 1068               	
 1069               	
 1070               	
 1071               	;;===============================kernel exit sleep mode starting============================;; 
 1072               	;used registers          : None                                                                
 1073               	;arg registers           : None                                                                
 1074               	;return registers        : None                                                                
 1075               	;unsafe access registers : None                                                                
 1076               	.macro KER_EXIT_SLEEP                                     ;total 0.63uS @8MHz     (  5 clocks) 
 1077               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 1078               	        LDS   R18                , SRSMCR                 ;load SMCR              (  2 clocks) 
 1079               			ANDI  R18                , 0xFE                   ;clear SE bit           (  1 clock ) 
 1080               			STS   SRSMCR             , R18                    ;set val                (  2 clocks) 
 1081               		#endif                                                                                     
 1082               	.endm                                                                                          
 1083               	;;=================================kernel exit sleep mode end===============================;; 
 1084               	
 1085               	
 1086               	
 1087               	
 1088               	
 1089               	;;=================================ISR execution starting===================================;; 
 1090               	#ifdef  KER_WDT_AS_TICK_SRC                                                                    
 1091               	.global  __vector_6                                                                            
 1092               	    __vector_6:                                           ;total 40.00uS @8MHz    (344 clocks) 
 1093               		    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 1094               			KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 1095               	        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1096               			KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1097               			KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 1098               			KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 1099               			LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 1100               			KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 1101               			KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 1102               			KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 1103               			KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 1104               		    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 1105               			LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
 1106               			ORI   R18                , 0x40                   ;set WDIE               (  1 clock ) 
 1107               			STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 1108               			RETI                                              ;return from interrupt  (  4 clocks) 
 1109               	#endif                                                                                         
 1110               	
 1111               	#ifdef  KER_TOSC_AS_TICK_SRC                                                                   
 1112               	.global  __vector_7                                                                            
 1113               	    __vector_7:                                           ;total 40.00uS @8MHz    (344 clocks) 
 1114               		    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 1115               			KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 1116               	        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1117               			KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1118               			KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 1119               			KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 1120               			LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 1121               			KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 1122               			KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 1123               			KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 1124               			KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 1125               		    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 1126               			RETI                                              ;return from interrupt  (  4 clocks) 
 1127               	.global  __vector_9                                                                            
 1128               	    __vector_9:                                           ;total 40.00uS @8MHz    (344 clocks) 
 1129               		    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 1130               			KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 1131               	        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1132               			KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1133               			KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 1134               			KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 1135               			LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 1136               			KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 1137               			KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 1138               			KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 1139               			KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 1140               		    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 1141               			RETI                                              ;return from interrupt  (  4 clocks) 
 1142               	#endif                                                                                         
 1143               	
 1144               	#ifdef  KER_TIMER0_AS_TICK_SRC                                                                 
 1145               	.global  __vector_16                                                                           
 1146               	    __vector_16:                                          ;total 40.00uS @8MHz    (339 clocks) 
 1147               		    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 1148               			KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 1149               	        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1150               			KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1151               			KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 1152               			KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 1153               			LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 1154               			KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 1155               			KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 1156               			KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 1157               			KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 1158               		    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 1159               			RETI                                              ;return from interrupt  (  4 clocks) 
 1160               	#endif                                                                                         
 1161               	;;====================================ISR execution end=====================================;; 
 1162               	
 1163               	
 1164               	
 1165               	
 1166               	
 1167               	;;================================SysTick reg init starting=================================;; 
 1168               	;used registers          : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
 1169               	;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
 1170               	;return registers        : None                                                                
 1171               	;unsafe access registers : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
 1172               	Kernel_SysTick_Reg_Init:                                  ;total 11.50uS @8MHz    ( 92 clocks) 
1173:kernel.S      ****         CLI                                               ;disable global int     (  1 clock ) 
1174:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
1175:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1176               			;clear reg                                                                             
1177:kernel.S      **** 		LDI   R18                , 0x00                   ;set 0x00 to R18        (  1 clock ) 
 1178               			;clear tick counter                                                                    
1179:kernel.S      **** 		STS   KerBase+OFB_TICK0  , R18                    ;clear  KerBase[0]      (  2 clocks) 
1180:kernel.S      **** 		STS   KerBase+OFB_TICK1  , R18                    ;clear  KerBase[1]      (  2 clocks) 
1181:kernel.S      **** 		STS   KerBase+OFB_TICK2  , R18                    ;clear  KerBase[2]      (  2 clocks) 
1182:kernel.S      **** 		STS   KerBase+OFB_TICK3  , R18                    ;clear  KerBase[3]      (  2 clocks) 
1183:kernel.S      **** 		STS   KerBase+OFB_TICK4  , R18                    ;clear  KerBase[4]      (  2 clocks) 
 1184               			;clear system registers                                                                
1185:kernel.S      **** 		STS   KerBase+OFB_PRS    , R18                    ;clear  KerBase[5]      (  2 clocks) 
1186:kernel.S      **** 		STS   KerBase+OFB_RLD    , R18                    ;clear  KerBase[6]      (  2 clocks) 
1187:kernel.S      **** 		STS   KerBase+OFB_TID    , R18                    ;clear  KerBase[7]      (  2 clocks) 
1188:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R18                    ;clear  KerBase[8]      (  2 clocks) 
1189:kernel.S      **** 		STS   KerBase+OFB_LPR    , R18                    ;clear  KerBase[9]      (  2 clocks) 
1190:kernel.S      ****         STS   KerBase+OFB_PTID   , R18                    ;clear  KerBase[10]     (  2 clocks) 
1191:kernel.S      **** 		STS   KerBase+OFB_UTC    , R18                    ;clear  KerBase[11]     (  2 clocks) 
1192:kernel.S      **** 		STS   KerBase+OFB_UATC   , R18                    ;clear  KerBase[12]     (  2 clocks) 
1193:kernel.S      **** 		STS   KerBase+OFB_USAGE  , R18                    ;clear  KerBase[13]     (  2 clocks) 
 1194               			;clear all timer registers                                                             
 1195               			#ifdef KER_TIMER0_AS_TICK_SRC                                                          
1196:kernel.S      **** 		STS   SRTCCR0A           , R18                    ;clear TCCR0A           (  2 clocks) 
1197:kernel.S      **** 		STS   SRTCCR0B           , R18                    ;clear TCCR0B           (  2 clocks) 
1198:kernel.S      **** 		STS   SRTIMSK0           , R18                    ;clear TIMSK0           (  2 clocks) 
1199:kernel.S      **** 		STS   SRTIFR0            , R18                    ;clear TIFR0            (  2 clocks) 
1200:kernel.S      **** 		STS   SROCR0A            , R18                    ;clear OCR0A            (  2 clocks) 
1201:kernel.S      **** 		STS   SROCR0B            , R18                    ;clear OCR0B            (  2 clocks) 
1202:kernel.S      **** 		STS   SRTCNT0            , R18                    ;clear TCNT0            (  2 clocks) 
1203:kernel.S      **** 		#endif                                                                                 
1204:kernel.S      ****         #ifdef KER_WDT_AS_TICK_SRC                                                             
1205:kernel.S      **** 		WDR                                               ;reset wdt              (  1 clock ) 
1206:kernel.S      **** 		LDS   R18                , SRMCUSR                ;copy MCUSR             (  1 clock ) 
1207:kernel.S      **** 		ANDI  R18                , 0xFF & (0<<WDRF)       ;clear WDRF             (  1 clock ) 
1208:kernel.S      **** 		STS   SRMCUSR            , R18                    ;set val                (  1 clock ) 
1209:kernel.S      **** 		LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
1210:kernel.S      **** 		ORI   R18                , 0x18                   ;set WDCE,WDE           (  1 clock ) 
1211:kernel.S      **** 		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
1212:kernel.S      **** 		LDI   R18                , 0x00                   ;clear WDE              (  1 clock ) 
1213:kernel.S      **** 		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 1214               			#endif                                                                                 
 1215               			#ifdef KER_TOSC_AS_TICK_SRC                                                            
 1216               	        LDI   R18                , 0x00                   ;clear interrupt enbits (  1 clock ) 
 1217               			STS   SRTIMSK2           , R18                    ;set val to TIMSK2      (  2 clocks) 
 1218               			LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
 1219               			STS   SRTCCR2B           , R18                    ;set val to TCCR2B      (  2 clocks) 
 1220               			LDI   R18                , 0x00                   ;clear AS2 bit          (  1 clock ) 
 1221               			STS   SRASSR             , R18                    ;set val to ASSR        (  2 clocks) 
 1222               			#endif                                                                                 
 1223               			;save values for future use                                                            
1224:kernel.S      **** 		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
1225:kernel.S      **** 		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
1226:kernel.S      ****         KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
1227:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1228               	;;===================================SysTick reg init end===================================;; 
 1229               	
 1230               	
 1231               	
 1232               	
 1233               	
 1234               	;;===============================kernel task create starting================================;; 
 1235               	;used registers          : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
 1236               	;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
 1237               	;return registers        : None                                                                
 1238               	;unsafe access registers : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
 1239               	Kernel_Task_Create:                                       ;total 21.50uS @8MHz    (172 clocks) 
1240:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1241               			;set priority to KerSchPr+task_id                                                      
1242:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
1243:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
1244:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
1245:kernel.S      **** 		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 1246               			;set task status to KerSchSts+task_id                                                  
1247:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1248:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1249:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
1250:kernel.S      **** 		LDI   R18                , TASK_READY             ;set status as ready    (  1 clock ) 
1251:kernel.S      **** 		ST    Z                  , R18                    ;save status            (  2 clocks) 
 1252               			;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
1253:kernel.S      **** 		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1254:kernel.S      **** 		INC   R18                                         ;increment task_id      (  1 clock ) 
1255:kernel.S      **** 		LDI   R19                , KER_STK_SZ             ;load stack size        (  1 clock ) 
1256:kernel.S      **** 		MUL   R18                , R19                    ;multiply to get offset (  2 clocks) 
1257:kernel.S      **** 		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
1258:kernel.S      **** 		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
1259:kernel.S      **** 		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
1260:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
1261:kernel.S      **** 		LDI   R18                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
1262:kernel.S      **** 		LDI   R19                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
1263:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1264:kernel.S      **** 		ADC   ZH                 , R19                    ;add high bytes+carry   (  1 clock ) 
1265:kernel.S      **** 		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
1266:kernel.S      ****         OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 1267               			;function argument directly returns word address                                       
1268:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
1269:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 1270               			;push context to stack of this task                                                    
1271:kernel.S      **** 		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1272               			;read stack pointer of current task (necessary when restore)                           
1273:kernel.S      **** 		IN    R18                , IOSPL                  ;read SPL               (  1 clock ) 
1274:kernel.S      ****         IN    R19                , IOSPH                  ;read SPH               (  1 clock ) 
 1275               			;calculate the address where current task's SP will be stored and store SP             
1276:kernel.S      **** 		LDS   R20                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1277:kernel.S      **** 		LSL   R20                                         ;left shift to multiply (  1 clock ) 
1278:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
1279:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
1280:kernel.S      **** 		ADD   ZL                 , R20                    ;add offset to array    (  1 clock ) 
1281:kernel.S      **** 		LDI   R20                , 0x00                   ;clear reg              (  1 clock ) 
1282:kernel.S      **** 		ADC   ZH                 , R20                    ;add carry if any       (  1 clock ) 
1283:kernel.S      **** 		ST    Z+                 , R18                    ;SPL at KerPSp+offset   (  2 clocks) 
1284:kernel.S      **** 		ST    Z                  , R19                    ;SPH at KerPSp+offset   (  2 clocks) 
 1285               			;increment task_id                                                                     
1286:kernel.S      **** 		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1287:kernel.S      **** 		INC   R18                                         ;increment task_id      (  1 clock ) 
1288:kernel.S      **** 		STS   KerBase+OFB_TID    , R18                    ;store task_id          (  2 clocks) 
 1289               			;increment ntask                                                                       
1290:kernel.S      **** 		LDS   R18                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
1291:kernel.S      **** 		INC   R18                                         ;increment ntask        (  1 clock ) 
1292:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R18                    ;store ntask            (  2 clocks) 
1293:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
1294:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1295               	;;==================================kernel task create end==================================;; 
 1296               	
 1297               	
 1298               	
 1299               	
 1300               	
 1301               	;;=================================kernel start tasks starting==============================;; 
 1302               	;used registers          : R0~R31                                                              
 1303               	;arg registers           : None                                                                
 1304               	;return registers        : None                                                                
 1305               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1306               	Kernel_Start_Tasks:                                       ;total 25.63uS @8MHz    (205 clocks) 
1307:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1308:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1309:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1310:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 1311               			;config timer for system tick                                                          
1312:kernel.S      **** 		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 1313               			;execute return to jump to highest priority task                                       
1314:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1315               	;;==================================kernel start tasks end==================================;; 
 1316               	
 1317               	
 1318               	
 1319               	
 1320               	
 1321               	;;===================================kernel init starting===================================;; 
 1322               	;used registers          : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
 1323               	;arg registers           : None                                                                
 1324               	;return registers        : None                                                                
 1325               	;unsafe access registers : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
 1326               	Kernel_Init:                                              ;total 39.75uS @8MHz    (318 clocks) 
1327:kernel.S      **** 		CLR   R1                                          ;gcc expects            (  1 clock ) 
 1328               	        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
1329:kernel.S      **** 		LDI   R18                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
1330:kernel.S      **** 		LDI   R19                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
1331:kernel.S      ****         STS   KerSSZ+OFM_MSPI+0  , R18                    ;set mspi to stack top  (  2 clocks) 
1332:kernel.S      **** 		STS   KerSSZ+OFM_MSPI+1  , R19                    ;set mspi to stack top  (  2 clocks) 
1333:kernel.S      **** 		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1334               			;init timer for kernel                                                                 
1335:kernel.S      **** 		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
1336:kernel.S      **** 		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
1337:kernel.S      **** 		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 1338               			;create idle task at task_id 0, priority 0xFF (lowest)                                 
1339:kernel.S      **** 		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
1340:kernel.S      **** 		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
1341:kernel.S      **** 		LSR   R25                                         ;right shift to divide  (  1 clock ) 
1342:kernel.S      **** 		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
1343:kernel.S      **** 		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
1344:kernel.S      **** 		CALL  Kernel_Task_Create                          ;init idle task         (172 clocks) 
1345:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 1346               			;execute return to jump to task0, pushed while task init                               
1347:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1348               	;;======================================kernel init end=====================================;; 
 1349               	
 1350               	
 1351               	
 1352               	
 1353               	
 1354               	;;=================================kernel idle task starting================================;; 
 1355               	;used registers          : None                                                                
 1356               	;arg registers           : None                                                                
 1357               	;return registers        : None                                                                
 1358               	;unsafe access registers : None                                                                
 1359               	Kernel_Task_Idle:                                                                              
1360:kernel.S      **** 	    KER_SLEEP_INIT                                    ;sleep init             (  5 clocks) 
 1361               	    _IDLE_LOOP:                                           ;forever loop                        
1362:kernel.S      **** 	    KER_DISABLE_ANALOG_DOMAIN                         ;disable adc, ac        ( 10 clocks) 
 1363               			#ifdef KER_CALL_FUNC_BEFORE_SLEEP                                                      
1364:kernel.S      **** 		CALL  Kernel_PreSleep_Hook                        ;call func before sleep (  8 clocks) 
 1365               			#endif                                                                                 
1366:kernel.S      **** 	    KER_ENTER_SLEEP                                   ;enter sleep mode       (  6 clocks) 
1367:kernel.S      **** 		RJMP  _IDLE_LOOP                                  ;jump to loop start     (  2 clocks) 
 1368               	;;==================================kernel idle task end====================================;; 
 1369               	
 1370               	
 1371               	
 1372               	
 1373               	
 1374               	;;================================kernel task sleep starting================================;; 
 1375               	;used registers          : R0~R31                                                              
 1376               	;arg registers           : R25:R24(SleepTime)                                                  
 1377               	;return registers        : None                                                                
 1378               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1379               	Kernel_Task_Sleep:                                        ;total 37.25uS @8MHz    (298 clocks) 
 1380               	        ;save current context                                                                  
1381:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
1382:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1383               			;create next task wakeup time (args R25:R24)                                           
1384:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1385:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1386:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
1387:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
1388:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 1389               			;update task scheduler status as blocked                                               
1390:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1391:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1392:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1393:kernel.S      ****         LDI   R18                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
1394:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 1395               			;run scheduler, load next task sp, restore context                                     
1396:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1397:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1398:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1399:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
1400:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1401               	;;=================================kernel task sleep end====================================;; 
 1402               	
 1403               	
 1404               	
 1405               	
 1406               	
 1407               	;;========================kernel task constant latency starting=============================;; 
 1408               	;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1409               	;arg registers           : R25:R24(SleepTime)                                                  
 1410               	;return registers        : None                                                                
 1411               	;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1412               	Kernel_Task_Constant_Latency:                             ;total 3.50uS @8MHz     ( 28 clocks) 
 1413               			;create next task wakeup time (args R25:R24)                                           
1414:kernel.S      **** 		CLI                                               ;disable interrupt      (  1 clock ) 
1415:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1416:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1417:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
1418:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
1419:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 1420               			;update task scheduler status as constant latency                                      
1421:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1422:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1423:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1424:kernel.S      ****         LDI   R18                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
1425:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
1426:kernel.S      **** 		SEI                                               ;enable interrupt       (  1 clock ) 
1427:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1428               	;;=============================kernel task constant latency end=============================;; 
 1429               	
 1430               	
 1431               	
 1432               	
 1433               	
 1434               	;;=======================kernel task constant latency sleep starting========================;; 
 1435               	;used registers          : R0~R31                                                              
 1436               	;arg registers           : R25:R24(SleepTime)                                                  
 1437               	;return registers        : None                                                                
 1438               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1439               	Kernel_Task_Constant_Latency_Sleep:                       ;total 35.75uS @8MHz    (286 clocks) 
 1440               			;save current context                                                                  
1441:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
1442:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1443               			;update task scheduler status as blocked                                               
1444:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1445:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1446:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1447:kernel.S      ****         LDI   R18                , TASK_BLOCKED           ;blocked until cnt=0    (  1 clock ) 
1448:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 1449               			;run scheduler, load next task sp, restore context                                     
1450:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1451:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1452:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1453:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
1454:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1455               	;;=============================kernel task constant latency end=============================;; 
 1456               	
 1457               	
 1458               	
 1459               	
 1460               	
 1461               	;;=========================kernel call func before sleep starting===========================;; 
 1462               	;used registers          : R24, R25, R30(ZL), R31(ZH)                                          
 1463               	;arg registers           : R25:R24(FunctionPtr)                                                
 1464               	;return registers        : None                                                                
 1465               	;unsafe access registers : R24, R25, R30(ZL), R31(ZH)                                          
 1466               	Kernel_PreSleep_Hook:                                     ;total 1.00uS @8MHz     (  8 clocks) 
1467:kernel.S      ****         MOVW  R30                , R24                    ;move pointer to Z      (  1 clock ) 
1468:kernel.S      **** 		ICALL                                             ;indirect call          (  3 clocks) 
1469:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1470               	;;============================kernel call func before sleep end=============================;; 
 1471               	
 1472               	
 1473               	
 1474               	
 1475               	
 1476               	;;===========================kernel task sleep time get starting============================;; 
 1477               	;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1478               	;arg registers           : R24(TaskID)                                                         
 1479               	;return registers        : R25:R24(SleepTime)                                                  
 1480               	;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1481               	Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
1482:kernel.S      **** 		MOV   R18                , R24                    ;copy                   (  1 clock ) 
1483:kernel.S      **** 		LSL   R18                                         ;x2                     (  1 clock ) 
1484:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1485:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1486:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1487:kernel.S      **** 		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
1488:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1489:kernel.S      **** 		LDD   R24                , Z+0                    ;load sleep time        (  2 clocks) 
1490:kernel.S      **** 		LDD   R25                , Z+1                    ;load sleep time        (  2 clocks) 
1491:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1492               	;;==============================kernel task sleep time get end==============================;; 
 1493               	
 1494               	
 1495               	
 1496               	
 1497               	
 1498               	;;==============================kernel task status get starting=============================;; 
 1499               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 1500               	;arg registers           : R24(TaskID)                                                         
 1501               	;return registers        : R24(TaskSts)                                                        
 1502               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 1503               	Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
1504:kernel.S      **** 		MOV   R18                , R24                    ;copy                   (  1 clock ) 
1505:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1506:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1507:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1508:kernel.S      **** 		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
1509:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1510:kernel.S      **** 		LD    R24                , Z                      ;load task status       (  2 clocks) 
1511:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1512               	;;================================kernel task status get end================================;; 
 1513               	
 1514               	
 1515               	
 1516               	
 1517               	
 1518               	;;================================kernel ntask get starting=================================;; 
 1519               	;used registers          : R24                                                                 
 1520               	;arg registers           : None                                                                
 1521               	;return registers        : R24(NTask)                                                          
 1522               	;unsafe access registers : R24                                                                 
 1523               	Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
1524:kernel.S      **** 		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
1525:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1526               	;;===================================kernel ntask get end===================================;; 
 1527               	
 1528               	
 1529               	
 1530               	
 1531               	
 1532               	;;=============================kernel task priority get starting============================;; 
 1533               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 1534               	;arg registers           : R24(TaskID)                                                         
 1535               	;return registers        : R24(TaskPriority)                                                   
 1536               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 1537               	Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
 1538               			;get priority of the task id, arg (task_id->R24), return R24                           
1539:kernel.S      **** 		MOV   R18                , R24                    ;copy task_id           (  1 clock ) 
1540:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
1541:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
1542:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1543:kernel.S      **** 		LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
1544:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1545:kernel.S      **** 		LD    R24                , Z                      ;load priority          (  2 clocks) 
1546:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1547               	;;================================kernel task priority get end==============================;; 
 1548               	
 1549               	
 1550               	
 1551               	
 1552               	
 1553               	;;============================kernel lowest priority get starting===========================;; 
 1554               	;used registers          : R24                                                                 
 1555               	;arg registers           : None                                                                
 1556               	;return registers        : R24(LowestPriorityVal)                                              
 1557               	;unsafe access registers : R24                                                                 
 1558               	Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
1559:kernel.S      **** 		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
1560:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1561               	;;===============================kernel lowest priority get end=============================;; 
 1562               	
 1563               	
 1564               	
 1565               	
 1566               	
 1567               	;;===========================kernel high priority task id starting==========================;; 
 1568               	;used registers          : R24                                                                 
 1569               	;arg registers           : None                                                                
 1570               	;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
 1571               	;unsafe access registers : R24                                                                 
 1572               	Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
1573:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1574:kernel.S      **** 		DEC   R24                                         ;decrement by 1         (  1 clock ) 
1575:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1576               	;;==============================kernel high priority task id end============================;; 
 1577               	
 1578               	
 1579               	
 1580               	
 1581               	
 1582               	;;=========================kernel abs high priority task id starting========================;; 
 1583               	;used registers          : R24                                                                 
 1584               	;arg registers           : None                                                                
 1585               	;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
 1586               	;unsafe access registers : R24                                                                 
 1587               	Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
1588:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1589:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1590               	;;============================kernel abs high priority task id end==========================;; 
 1591               	
 1592               	
 1593               	
 1594               	
 1595               	
 1596               	;;================================kernel cpu usage get starting=============================;; 
 1597               	;used registers          : R24                                                                 
 1598               	;arg registers           : None                                                                
 1599               	;return registers        : R24(CurrentCpuUsage)->In percentage                                 
 1600               	;unsafe access registers : R24                                                                 
 1601               	Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
 1602               			;get cpu usage, return R24                                                             
1603:kernel.S      **** 		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
1604:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1605               	;;==================================kernel cpu usage get end================================;; 
DEFINED SYMBOLS
            kernel.S:20     *ABS*:000003e8 KER_TR
            kernel.S:21     *ABS*:00000003 KER_PRS
            kernel.S:22     *ABS*:00000082 KER_RLD
            kernel.S:23     *ABS*:00000080 KER_STK_SZ
            kernel.S:24     *ABS*:0000000a KER_MX_NTSK
            kernel.S:32     *ABS*:00000000 OFB_TICK0
            kernel.S:33     *ABS*:00000001 OFB_TICK1
            kernel.S:34     *ABS*:00000002 OFB_TICK2
            kernel.S:35     *ABS*:00000003 OFB_TICK3
            kernel.S:36     *ABS*:00000004 OFB_TICK4
            kernel.S:37     *ABS*:00000005 OFB_PRS
            kernel.S:38     *ABS*:00000006 OFB_RLD
            kernel.S:39     *ABS*:00000007 OFB_TID
            kernel.S:40     *ABS*:00000008 OFB_NTSK
            kernel.S:41     *ABS*:00000009 OFB_LPR
            kernel.S:42     *ABS*:0000000a OFB_PTID
            kernel.S:43     *ABS*:0000000b OFB_UTC
            kernel.S:44     *ABS*:0000000c OFB_UATC
            kernel.S:45     *ABS*:0000000d OFB_USAGE
            kernel.S:46     *ABS*:0000000e OFB_SLCFG
            kernel.S:47     *ABS*:00000000 OFM_MSPI
            kernel.S:48     *ABS*:00000002 OFM_MSPS
            kernel.S:56     *ABS*:00000000 TASK_BLOCKED
            kernel.S:57     *ABS*:00000001 TASK_READY
            kernel.S:58     *ABS*:00000002 TASK_EXECUTING
            kernel.S:59     *ABS*:00000003 TASK_SUSPENDED
            kernel.S:60     *ABS*:00000004 TASK_CONS_LAT
            kernel.S:61     *ABS*:00000000 SCH_MODE_HANDLER
            kernel.S:62     *ABS*:00000001 SCH_MODE_THREAD
            kernel.S:71     *ABS*:000000b6 SRASSR
            kernel.S:72     *ABS*:000000b4 SROCR2B
            kernel.S:73     *ABS*:000000b3 SROCR2A
            kernel.S:74     *ABS*:000000b2 SRTCNT2
            kernel.S:75     *ABS*:000000b1 SRTCCR2B
            kernel.S:76     *ABS*:000000b0 SRTCCR2A
            kernel.S:77     *ABS*:0000007c SRADMUX
            kernel.S:78     *ABS*:0000007b SRADCSRB
            kernel.S:79     *ABS*:0000007a SRADCSRA
            kernel.S:80     *ABS*:00000070 SRTIMSK2
            kernel.S:81     *ABS*:0000006f SRTIMSK1
            kernel.S:82     *ABS*:0000006e SRTIMSK0
            kernel.S:83     *ABS*:00000060 SRWDTCSR
            kernel.S:84     *ABS*:0000005f SRSREG
            kernel.S:85     *ABS*:0000005e SRSPH
            kernel.S:86     *ABS*:0000005d SRSPL
            kernel.S:87     *ABS*:00000055 SRMCUCR
            kernel.S:88     *ABS*:00000054 SRMCUSR
            kernel.S:89     *ABS*:00000053 SRSMCR
            kernel.S:90     *ABS*:00000050 SRACSR
            kernel.S:91     *ABS*:00000048 SROCR0B
            kernel.S:92     *ABS*:00000047 SROCR0A
            kernel.S:93     *ABS*:00000046 SRTCNT0
            kernel.S:94     *ABS*:00000045 SRTCCR0B
            kernel.S:95     *ABS*:00000044 SRTCCR0A
            kernel.S:96     *ABS*:00000037 SRTIFR2
            kernel.S:97     *ABS*:00000036 SRTIFR1
            kernel.S:98     *ABS*:00000035 SRTIFR0
            kernel.S:100    *ABS*:0000003f IOSREG
            kernel.S:101    *ABS*:0000003e IOSPH
            kernel.S:102    *ABS*:0000003d IOSPL
            kernel.S:103    *ABS*:00000035 IOMCUCR
            kernel.S:104    *ABS*:00000034 IOMCUSR
            kernel.S:105    *ABS*:00000033 IOSMCR
            kernel.S:106    *ABS*:00000028 IOOCR0B
            kernel.S:107    *ABS*:00000027 IOOCR0A
            kernel.S:108    *ABS*:00000026 IOTCNT0
            kernel.S:109    *ABS*:00000025 IOTCCR0B
            kernel.S:110    *ABS*:00000024 IOTCCR0A
            kernel.S:111    *ABS*:00000017 IOTIFR2
            kernel.S:112    *ABS*:00000016 IOTIFR1
            kernel.S:113    *ABS*:00000015 IOTIFR0
            kernel.S:124    .bss:00000000 KerBase
            kernel.S:127    .bss:00000010 KerPSP
            kernel.S:130    .bss:00000024 KerSSZ
            kernel.S:133    .bss:00000032 KerSchSts
            kernel.S:136    .bss:0000003c KerSchPr
            kernel.S:139    .bss:00000046 KerSchSlp
            kernel.S:142    .bss:0000005a KerStack
            kernel.S:947    .text:00000000 __vector_6
            kernel.S:1172   .text:000001f0 Kernel_SysTick_Reg_Init
            kernel.S:1326   .text:000004a2 Kernel_Init
            kernel.S:1239   .text:0000028e Kernel_Task_Create
            kernel.S:1306   .text:0000037e Kernel_Start_Tasks
            kernel.S:1359   .text:00000500 Kernel_Task_Idle
            kernel.S:1379   .text:00000530 Kernel_Task_Sleep
            kernel.S:1412   .text:000006c6 Kernel_Task_Constant_Latency
            kernel.S:1439   .text:000006f2 Kernel_Task_Constant_Latency_Sleep
            kernel.S:1466   .text:00000874 Kernel_PreSleep_Hook
            kernel.S:1481   .text:0000087a Kernel_Task_Sleep_Time_Get
            kernel.S:1503   .text:0000088e Kernel_Task_Status_Get
            kernel.S:1523   .text:0000089e Kernel_NTask_Get
            kernel.S:1537   .text:000008a4 Kernel_Task_Prio_Get
            kernel.S:1558   .text:000008b4 Kernel_Lowest_Prio_Get
            kernel.S:1572   .text:000008ba Kernel_High_Prio_Task_ID_Get
            kernel.S:1587   .text:000008c2 Kernel_Abs_High_Prio_Task_ID_Get
            kernel.S:1601   .text:000008c8 Kernel_CPU_Usage_Get
            kernel.S:955    .text:000000b6 _KER_SCH_LOOP9
            kernel.S:955    .text:000000ec _VAL_NULL10
            kernel.S:955    .text:00000100 _VAL_NOT_NULL10
            kernel.S:955    .text:00000110 _EXIT_SLP_TIME10
            kernel.S:955    .text:0000011a _KER_CALC_PRIO9
            kernel.S:955    .text:0000013e _KER_SCH_NEXT9
            kernel.S:955    .text:0000014e _KER_SCH_EXIT9
            kernel.S:956    .text:00000168 _KER_USG_TICK15
            kernel.S:956    .text:00000182 _KER_USG_UTC_SV15
            kernel.S:1308   .text:0000038e _KER_SCH_LOOP32
            kernel.S:1308   .text:000003c4 _VAL_NULL33
            kernel.S:1308   .text:000003d8 _VAL_NOT_NULL33
            kernel.S:1308   .text:000003e8 _EXIT_SLP_TIME33
            kernel.S:1308   .text:000003f2 _KER_CALC_PRIO32
            kernel.S:1308   .text:00000416 _KER_SCH_NEXT32
            kernel.S:1308   .text:00000426 _KER_SCH_EXIT32
            kernel.S:1361   .text:0000050a _IDLE_LOOP
            kernel.S:1397   .text:000005c6 _KER_SCH_LOOP56
            kernel.S:1397   .text:000005fc _VAL_NULL57
            kernel.S:1397   .text:00000610 _VAL_NOT_NULL57
            kernel.S:1397   .text:00000620 _EXIT_SLP_TIME57
            kernel.S:1397   .text:0000062a _KER_CALC_PRIO56
            kernel.S:1397   .text:0000064e _KER_SCH_NEXT56
            kernel.S:1397   .text:0000065e _KER_SCH_EXIT56
            kernel.S:1451   .text:00000774 _KER_SCH_LOOP75
            kernel.S:1451   .text:000007aa _VAL_NULL76
            kernel.S:1451   .text:000007be _VAL_NOT_NULL76
            kernel.S:1451   .text:000007ce _EXIT_SLP_TIME76
            kernel.S:1451   .text:000007d8 _KER_CALC_PRIO75
            kernel.S:1451   .text:000007fc _KER_SCH_NEXT75
            kernel.S:1451   .text:0000080c _KER_SCH_EXIT75

UNDEFINED SYMBOLS
__vector_7
__vector_8
__vector_9
__vector_16
Kernel_SysTick_Val_Get
Kernel_SysTick_Val_Safely_Get
Kernel_Interrupt_Sts_Get
