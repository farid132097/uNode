
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b6c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000563  00800100  00800100  00000be0  2**0
                  ALLOC
  2 .stab         00000a08  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000037  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  0000161f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000014f  00000000  00000000  0000167f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000323  00000000  00000000  000017ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000014a  00000000  00000000  00001af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000317  00000000  00000000  00001c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001cb  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b1  00000000  00000000  0000222f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 2b 01 	jmp	0x256	; 0x256 <__vector_6>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	f0 c0       	rjmp	.+480    	; 0x256 <__vector_6>
  76:	1b c0       	rjmp	.+54     	; 0xae <__bad_interrupt>
  78:	1a c0       	rjmp	.+52     	; 0xae <__bad_interrupt>
  7a:	19 c0       	rjmp	.+50     	; 0xae <__bad_interrupt>
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	12 c0       	rjmp	.+36     	; 0xae <__bad_interrupt>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_clear_bss>:
  96:	16 e0       	ldi	r17, 0x06	; 6
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a3 36       	cpi	r26, 0x63	; 99
  a2:	b1 07       	cpc	r27, r17
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  aa:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:


int main(void) 
{
    
	Kernel_Init();
  b2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <Kernel_Init>

	Kernel_Task_Create(Task_RGB_LED,  5);
  b6:	83 eb       	ldi	r24, 0xB3	; 179
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	65 e0       	ldi	r22, 0x05	; 5
  bc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Task_Vin_Sense,  1);
  c0:	8e eb       	ldi	r24, 0xBE	; 190
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ca:	8e ea       	ldi	r24, 0xAE	; 174
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	62 e0       	ldi	r22, 0x02	; 2
  d0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  3);
  d4:	89 ea       	ldi	r24, 0xA9	; 169
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	63 e0       	ldi	r22, 0x03	; 3
  da:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  0);
  de:	84 ea       	ldi	r24, 0xA4	; 164
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  6);
  e8:	8f e9       	ldi	r24, 0x9F	; 159
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	66 e0       	ldi	r22, 0x06	; 6
  ee:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  4);
  f2:	8a e9       	ldi	r24, 0x9A	; 154
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	64 e0       	ldi	r22, 0x04	; 4
  f8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  8);
  fc:	85 e9       	ldi	r24, 0x95	; 149
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	68 e0       	ldi	r22, 0x08	; 8
 102:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task9,  7);
 106:	80 e9       	ldi	r24, 0x90	; 144
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	67 e0       	ldi	r22, 0x07	; 7
 10c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_PreSleep_Hook(Tasks_Disable_Peripherals);
 110:	8f e8       	ldi	r24, 0x8F	; 143
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 65 05 	call	0xaca	; 0xaca <Kernel_PreSleep_Hook>
	
	Kernel_Start_Tasks();
 118:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <Kernel_Start_Tasks>
 11c:	ff cf       	rjmp	.-2      	; 0x11c <SRASSR+0x66>

0000011e <Tasks_Disable_Peripherals>:
#include "tasks.h"

void Tasks_Disable_Peripherals(void)
{
    
}
 11e:	08 95       	ret

00000120 <Tasks_Task9>:
void Tasks_Task9(void){
  
  
  while(1){
    
    Kernel_Task_Sleep(7000/KER_TICK_TIME);
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 c3 03 	call	0x786	; 0x786 <Kernel_Task_Sleep>
 128:	fb cf       	rjmp	.-10     	; 0x120 <Tasks_Task9>

0000012a <Tasks_Task8>:
  
  
  while(1){
    
    
    Kernel_Task_Sleep(7000/KER_TICK_TIME);
 12a:	87 e0       	ldi	r24, 0x07	; 7
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 c3 03 	call	0x786	; 0x786 <Kernel_Task_Sleep>
 132:	fb cf       	rjmp	.-10     	; 0x12a <Tasks_Task8>

00000134 <Tasks_Task7>:
  
  
  while(1){

    
    Kernel_Task_Sleep(7000/KER_TICK_TIME);
 134:	87 e0       	ldi	r24, 0x07	; 7
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 c3 03 	call	0x786	; 0x786 <Kernel_Task_Sleep>
 13c:	fb cf       	rjmp	.-10     	; 0x134 <Tasks_Task7>

0000013e <Tasks_Task6>:
  
  
  while(1){

    
    Kernel_Task_Sleep(7000/KER_TICK_TIME);
 13e:	87 e0       	ldi	r24, 0x07	; 7
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 c3 03 	call	0x786	; 0x786 <Kernel_Task_Sleep>
 146:	fb cf       	rjmp	.-10     	; 0x13e <Tasks_Task6>

00000148 <Tasks_Task5>:

void Tasks_Task5(void){
  
  while(1){
    
    Kernel_Task_Sleep(7000/KER_TICK_TIME);
 148:	87 e0       	ldi	r24, 0x07	; 7
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 c3 03 	call	0x786	; 0x786 <Kernel_Task_Sleep>
 150:	fb cf       	rjmp	.-10     	; 0x148 <Tasks_Task5>

00000152 <Tasks_Task4>:

  
  while(1){

    
    Kernel_Task_Sleep(7000/KER_TICK_TIME);
 152:	87 e0       	ldi	r24, 0x07	; 7
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 c3 03 	call	0x786	; 0x786 <Kernel_Task_Sleep>
 15a:	fb cf       	rjmp	.-10     	; 0x152 <Tasks_Task4>

0000015c <Tasks_Task3>:

  
  while(1){

    
    Kernel_Task_Sleep(7000/KER_TICK_TIME);
 15c:	87 e0       	ldi	r24, 0x07	; 7
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 c3 03 	call	0x786	; 0x786 <Kernel_Task_Sleep>
 164:	fb cf       	rjmp	.-10     	; 0x15c <Tasks_Task3>

00000166 <Task_RGB_LED>:
}

void Task_RGB_LED(void)
{
    //Red, Blue, Green
    DDRD |= (1<<5)|(1<<6)|(1<<7);
 166:	8a b1       	in	r24, 0x0a	; 10
 168:	80 6e       	ori	r24, 0xE0	; 224
 16a:	8a b9       	out	0x0a, r24	; 10
    PORTD|= (1<<5)|(1<<6)|(1<<7);
 16c:	8b b1       	in	r24, 0x0b	; 11
 16e:	80 6e       	ori	r24, 0xE0	; 224
 170:	8b b9       	out	0x0b, r24	; 11
  
    while(1)
    {
        Kernel_Task_Sleep(30000/KER_TICK_TIME);
 172:	8e e1       	ldi	r24, 0x1E	; 30
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 c3 03 	call	0x786	; 0x786 <Kernel_Task_Sleep>
 17a:	fb cf       	rjmp	.-10     	; 0x172 <Task_RGB_LED+0xc>

0000017c <Task_Vin_Sense>:
}

void Task_Vin_Sense(void){
  
  //Init and Disable Vinsense
  DDRD  |= (1<<2);
 17c:	52 9a       	sbi	0x0a, 2	; 10
  PORTD &=~(1<<2);
 17e:	5a 98       	cbi	0x0b, 2	; 11

  while(1){
    
    Peripherals_ADC_Sample(6, 4);
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	64 e0       	ldi	r22, 0x04	; 4
 184:	0e 94 dd 00 	call	0x1ba	; 0x1ba <Peripherals_ADC_Sample>
    Kernel_Task_Sleep(60000/KER_TICK_TIME);
 188:	8c e3       	ldi	r24, 0x3C	; 60
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 c3 03 	call	0x786	; 0x786 <Kernel_Task_Sleep>
 190:	f7 cf       	rjmp	.-18     	; 0x180 <Task_Vin_Sense+0x4>

00000192 <Peripherals_ADC_Init>:
};


void Peripherals_ADC_Init(void)
{
    if( !(ADCSRA & (1<<ADEN)) )
 192:	80 91 7a 00 	lds	r24, 0x007A
 196:	87 fd       	sbrc	r24, 7
 198:	0f c0       	rjmp	.+30     	; 0x1b8 <Peripherals_ADC_Init+0x26>
    {
        ADMUX   = (1<<REFS1)|(1<<REFS0)|0x0F;
 19a:	8f ec       	ldi	r24, 0xCF	; 207
 19c:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA  = (1<<ADPS1)|(1<<ADPS2);
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	80 93 7a 00 	sts	0x007A, r24
        ADCSRA |= (1<<ADEN) |(1<<ADSC);
 1a6:	80 91 7a 00 	lds	r24, 0x007A
 1aa:	80 6c       	ori	r24, 0xC0	; 192
 1ac:	80 93 7a 00 	sts	0x007A, r24
        while (!(ADCSRA & (1<<ADIF))) 
 1b0:	80 91 7a 00 	lds	r24, 0x007A
 1b4:	84 ff       	sbrs	r24, 4
 1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <Peripherals_ADC_Init+0x1e>
 1b8:	08 95       	ret

000001ba <Peripherals_ADC_Sample>:
        }
    }
}

uint16_t Peripherals_ADC_Sample(uint8_t channel, uint8_t nsamples)
{
 1ba:	df 92       	push	r13
 1bc:	ef 92       	push	r14
 1be:	ff 92       	push	r15
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	18 2f       	mov	r17, r24
 1c6:	d6 2e       	mov	r13, r22
    uint8_t  temp;
    uint32_t val = 0;
    Peripherals_ADC_Init();
 1c8:	0e 94 c9 00 	call	0x192	; 0x192 <Peripherals_ADC_Init>
    temp  = ADMUX;
 1cc:	80 91 7c 00 	lds	r24, 0x007C
    temp &= 0xF0;
 1d0:	80 7f       	andi	r24, 0xF0	; 240
    temp |= channel;
 1d2:	81 2b       	or	r24, r17
    ADMUX = temp;
 1d4:	80 93 7c 00 	sts	0x007C, r24
 1d8:	ee 24       	eor	r14, r14
 1da:	ff 24       	eor	r15, r15
 1dc:	87 01       	movw	r16, r14
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	14 c0       	rjmp	.+40     	; 0x20a <Peripherals_ADC_Sample+0x50>
    for(uint8_t i=0; i<nsamples; i++)
    {
        ADCSRA |= (1<<ADSC);
 1e2:	80 91 7a 00 	lds	r24, 0x007A
 1e6:	80 64       	ori	r24, 0x40	; 64
 1e8:	80 93 7a 00 	sts	0x007A, r24
        while (!(ADCSRA & (1<<ADIF))) 
 1ec:	80 91 7a 00 	lds	r24, 0x007A
 1f0:	84 ff       	sbrs	r24, 4
 1f2:	fc cf       	rjmp	.-8      	; 0x1ec <Peripherals_ADC_Sample+0x32>
        {
            //add timeout management
        }
        val += ADCW;
 1f4:	80 91 78 00 	lds	r24, 0x0078
 1f8:	90 91 79 00 	lds	r25, 0x0079
 1fc:	a0 e0       	ldi	r26, 0x00	; 0
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	e8 0e       	add	r14, r24
 202:	f9 1e       	adc	r15, r25
 204:	0a 1f       	adc	r16, r26
 206:	1b 1f       	adc	r17, r27
    Peripherals_ADC_Init();
    temp  = ADMUX;
    temp &= 0xF0;
    temp |= channel;
    ADMUX = temp;
    for(uint8_t i=0; i<nsamples; i++)
 208:	2f 5f       	subi	r18, 0xFF	; 255
 20a:	2d 15       	cp	r18, r13
 20c:	50 f3       	brcs	.-44     	; 0x1e2 <Peripherals_ADC_Sample+0x28>
 20e:	2d 2d       	mov	r18, r13
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	c8 01       	movw	r24, r16
 218:	b7 01       	movw	r22, r14
 21a:	0e 94 92 05 	call	0xb24	; 0xb24 <__udivmodsi4>
 21e:	c9 01       	movw	r24, r18
        }
        val += ADCW;
    }
    val /= nsamples;
    return (uint16_t)val;
}
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	ff 90       	pop	r15
 226:	ef 90       	pop	r14
 228:	df 90       	pop	r13
 22a:	08 95       	ret

0000022c <Peripherals_Vin_Sense>:

void Peripherals_Vin_Sense(void)
{
    //Status bit 0 indicates Vinsense is active
    Peripherals.Status |= (1<<0);
 22c:	80 91 00 01 	lds	r24, 0x0100
 230:	81 60       	ori	r24, 0x01	; 1
 232:	80 93 00 01 	sts	0x0100, r24
    PORTD |= (1<<2);
 236:	5a 9a       	sbi	0x0b, 2	; 11
    Peripherals.VinRawADC = Peripherals_ADC_Sample(6, 4);
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	64 e0       	ldi	r22, 0x04	; 4
 23c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <Peripherals_ADC_Sample>
 240:	90 93 02 01 	sts	0x0102, r25
 244:	80 93 01 01 	sts	0x0101, r24
    PORTD |= (1<<2);
 248:	5a 9a       	sbi	0x0b, 2	; 11
    Peripherals.Status &=~(1<<0);
 24a:	80 91 00 01 	lds	r24, 0x0100
 24e:	8e 7f       	andi	r24, 0xFE	; 254
 250:	80 93 00 01 	sts	0x0100, r24
 254:	08 95       	ret

00000256 <__vector_6>:
		BRSH   _KER_SCH_NEXT\@                            ;if prio>=lowest prio   (  2 clocks) 
		;found new lowest priority                                                             
		STS    KerBase+OFB_LPR   , R24                    ;save lowest priority   (  2 clocks) 
		LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
		STS    KerBase+OFB_PTID  , R18                    ;save lowest priority   (  2 clocks) 
                                                                                               
 256:	5d 9a       	sbi	0x0b, 5	; 11
    _KER_SCH_NEXT\@:                                                                           
 258:	20 91 53 00 	lds	r18, 0x0053
 25c:	2e 7f       	andi	r18, 0xFE	; 254
 25e:	20 93 53 00 	sts	0x0053, r18
	    LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	1f 92       	push	r1
 26a:	11 24       	eor	r1, r1
 26c:	2f 92       	push	r2
 26e:	3f 92       	push	r3
 270:	4f 92       	push	r4
 272:	5f 92       	push	r5
 274:	6f 92       	push	r6
 276:	7f 92       	push	r7
 278:	8f 92       	push	r8
 27a:	9f 92       	push	r9
 27c:	af 92       	push	r10
 27e:	bf 92       	push	r11
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	ef 93       	push	r30
 2a6:	ff 93       	push	r31
		INC    R18                                        ;increment by 1         (  1 clock ) 
 2a8:	e9 e1       	ldi	r30, 0x19	; 25
 2aa:	f1 e0       	ldi	r31, 0x01	; 1
 2ac:	20 91 10 01 	lds	r18, 0x0110
 2b0:	22 0f       	add	r18, r18
 2b2:	e2 0f       	add	r30, r18
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	f2 1f       	adc	r31, r18
 2b8:	2d b7       	in	r18, 0x3d	; 61
 2ba:	3e b7       	in	r19, 0x3e	; 62
 2bc:	20 83       	st	Z, r18
 2be:	31 83       	std	Z+1, r19	; 0x01
		LDS    R19               , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 2c0:	20 91 0f 01 	lds	r18, 0x010F
 2c4:	20 93 46 00 	sts	0x0046, r18
		CP     R18               , R19                    ;compare with ntask     (  2 clocks) 
 2c8:	20 91 09 01 	lds	r18, 0x0109
 2cc:	23 95       	inc	r18
 2ce:	20 93 09 01 	sts	0x0109, r18
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	20 91 0a 01 	lds	r18, 0x010A
 2d8:	23 1f       	adc	r18, r19
 2da:	20 93 0a 01 	sts	0x010A, r18
 2de:	20 91 0b 01 	lds	r18, 0x010B
 2e2:	23 1f       	adc	r18, r19
 2e4:	20 93 0b 01 	sts	0x010B, r18
 2e8:	20 91 0c 01 	lds	r18, 0x010C
 2ec:	23 1f       	adc	r18, r19
 2ee:	20 93 0c 01 	sts	0x010C, r18
 2f2:	20 91 0d 01 	lds	r18, 0x010D
 2f6:	23 1f       	adc	r18, r19
 2f8:	20 93 0d 01 	sts	0x010D, r18
		BRSH   _KER_SCH_EXIT\@                            ;if task_id>=ntask      (  2 clocks) 
 2fc:	80 e0       	ldi	r24, 0x00	; 0
		RJMP   _KER_SCH_LOOP\@                            ;jump to entry          (  2 clocks) 
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	20 93 12 01 	sts	0x0112, r18
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	20 93 13 01 	sts	0x0113, r18
 30a:	58 2f       	mov	r21, r24

0000030c <_KER_SCH_LOOP9>:
 30c:	20 93 10 01 	sts	0x0110, r18
 310:	85 2f       	mov	r24, r21
 312:	ef e4       	ldi	r30, 0x4F	; 79
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	20 91 10 01 	lds	r18, 0x0110
 31a:	22 0f       	add	r18, r18
 31c:	e2 0f       	add	r30, r18
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	f2 1f       	adc	r31, r18
 322:	20 81       	ld	r18, Z
 324:	31 81       	ldd	r19, Z+1	; 0x01
 326:	42 2f       	mov	r20, r18
 328:	43 2b       	or	r20, r19
 32a:	59 f0       	breq	.+22     	; 0x342 <_VAL_NULL10>
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	99 f0       	breq	.+38     	; 0x356 <_VAL_NOT_NULL10>
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	24 1b       	sub	r18, r20
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	34 0b       	sbc	r19, r20
 338:	20 83       	st	Z, r18
 33a:	31 83       	std	Z+1, r19	; 0x01
 33c:	42 2f       	mov	r20, r18
 33e:	43 2b       	or	r20, r19
 340:	51 f4       	brne	.+20     	; 0x356 <_VAL_NOT_NULL10>

00000342 <_VAL_NULL10>:
 342:	eb e3       	ldi	r30, 0x3B	; 59
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	20 91 10 01 	lds	r18, 0x0110
 34a:	e2 0f       	add	r30, r18
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	f2 1f       	adc	r31, r18
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 83       	st	Z, r24
 354:	08 c0       	rjmp	.+16     	; 0x366 <_EXIT_SLP_TIME10>

00000356 <_VAL_NOT_NULL10>:
 356:	eb e3       	ldi	r30, 0x3B	; 59
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	20 91 10 01 	lds	r18, 0x0110
 35e:	e2 0f       	add	r30, r18
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	f2 1f       	adc	r31, r18
 364:	80 81       	ld	r24, Z

00000366 <_EXIT_SLP_TIME10>:
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	19 f0       	breq	.+6      	; 0x370 <_KER_CALC_PRIO9>
 36a:	84 30       	cpi	r24, 0x04	; 4
 36c:	09 f0       	breq	.+2      	; 0x370 <_KER_CALC_PRIO9>
 36e:	12 c0       	rjmp	.+36     	; 0x394 <_KER_SCH_NEXT9>

00000370 <_KER_CALC_PRIO9>:
 370:	e5 e4       	ldi	r30, 0x45	; 69
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	80 91 10 01 	lds	r24, 0x0110
 37a:	e8 0f       	add	r30, r24
 37c:	f2 1f       	adc	r31, r18
 37e:	80 81       	ld	r24, Z
 380:	20 91 12 01 	lds	r18, 0x0112
 384:	82 17       	cp	r24, r18
 386:	30 f4       	brcc	.+12     	; 0x394 <_KER_SCH_NEXT9>
 388:	80 93 12 01 	sts	0x0112, r24
 38c:	20 91 10 01 	lds	r18, 0x0110
 390:	20 93 13 01 	sts	0x0113, r18

00000394 <_KER_SCH_NEXT9>:
 394:	20 91 10 01 	lds	r18, 0x0110
 398:	23 95       	inc	r18
 39a:	30 91 11 01 	lds	r19, 0x0111
 39e:	23 17       	cp	r18, r19
 3a0:	08 f4       	brcc	.+2      	; 0x3a4 <_KER_SCH_EXIT9>
 3a2:	b4 cf       	rjmp	.-152    	; 0x30c <_KER_SCH_LOOP9>

000003a4 <_KER_SCH_EXIT9>:
 3a4:	20 91 13 01 	lds	r18, 0x0113
 3a8:	20 93 10 01 	sts	0x0110, r18
	_KER_SCH_EXIT\@:                                                                           
 3ac:	20 91 10 01 	lds	r18, 0x0110
 3b0:	22 23       	and	r18, r18
 3b2:	29 f0       	breq	.+10     	; 0x3be <_KER_USG_TICK15>
 3b4:	20 91 15 01 	lds	r18, 0x0115
 3b8:	23 95       	inc	r18
 3ba:	20 93 15 01 	sts	0x0115, r18

000003be <_KER_USG_TICK15>:
 3be:	20 91 14 01 	lds	r18, 0x0114
 3c2:	23 95       	inc	r18
 3c4:	24 36       	cpi	r18, 0x64	; 100
 3c6:	40 f0       	brcs	.+16     	; 0x3d8 <_KER_USG_UTC_SV15>
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 91 15 01 	lds	r19, 0x0115
 3ce:	30 93 16 01 	sts	0x0116, r19
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	30 93 15 01 	sts	0x0115, r19

000003d8 <_KER_USG_UTC_SV15>:
 3d8:	20 93 14 01 	sts	0x0114, r18
        LDS    R18               , KerBase+OFB_PTID       ;load high prio task id (  2 clocks) 
 3dc:	e9 e1       	ldi	r30, 0x19	; 25
 3de:	f1 e0       	ldi	r31, 0x01	; 1
 3e0:	20 91 10 01 	lds	r18, 0x0110
 3e4:	22 0f       	add	r18, r18
 3e6:	e2 0f       	add	r30, r18
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	f2 1f       	adc	r31, r18
 3ec:	20 81       	ld	r18, Z
 3ee:	31 81       	ldd	r19, Z+1	; 0x01
 3f0:	2d bf       	out	0x3d, r18	; 61
 3f2:	3e bf       	out	0x3e, r19	; 62
		STS    KerBase+OFB_TID   , R18                    ;for test only          (  2 clocks) 
 3f4:	ff 91       	pop	r31
 3f6:	ef 91       	pop	r30
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	bf 91       	pop	r27
 3fe:	af 91       	pop	r26
 400:	9f 91       	pop	r25
 402:	8f 91       	pop	r24
 404:	7f 91       	pop	r23
 406:	6f 91       	pop	r22
 408:	5f 91       	pop	r21
 40a:	4f 91       	pop	r20
 40c:	3f 91       	pop	r19
 40e:	2f 91       	pop	r18
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	ff 90       	pop	r15
 416:	ef 90       	pop	r14
 418:	df 90       	pop	r13
 41a:	cf 90       	pop	r12
 41c:	bf 90       	pop	r11
 41e:	af 90       	pop	r10
 420:	9f 90       	pop	r9
 422:	8f 90       	pop	r8
 424:	7f 90       	pop	r7
 426:	6f 90       	pop	r6
 428:	5f 90       	pop	r5
 42a:	4f 90       	pop	r4
 42c:	3f 90       	pop	r3
 42e:	2f 90       	pop	r2
 430:	1f 90       	pop	r1
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
.endm                                                                                          
 438:	5d 98       	cbi	0x0b, 5	; 11
;;===================================run scheduler end======================================;; 
 43a:	20 91 60 00 	lds	r18, 0x0060

 43e:	20 64       	ori	r18, 0x40	; 64

 440:	20 93 60 00 	sts	0x0060, r18

 444:	18 95       	reti

00000446 <Kernel_SysTick_Reg_Init>:
;used registers          : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
;return registers        : None                                                                
;unsafe access registers : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
Kernel_SysTick_Reg_Init:                                  ;total 11.50uS @8MHz    ( 92 clocks) 
        CLI                                               ;disable global int     (  1 clock ) 
 446:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 448:	5d 98       	cbi	0x0b, 5	; 11
 44a:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 44c:	a0 91 2d 01 	lds	r26, 0x012D
 450:	b0 91 2e 01 	lds	r27, 0x012E
 454:	2d b7       	in	r18, 0x3d	; 61
 456:	3e b7       	in	r19, 0x3e	; 62
 458:	2d 93       	st	X+, r18
 45a:	3d 93       	st	X+, r19
 45c:	ed 93       	st	X+, r30
 45e:	fd 93       	st	X+, r31
 460:	a0 93 2d 01 	sts	0x012D, r26
 464:	b0 93 2e 01 	sts	0x012E, r27
		;clear reg                                                                             
		LDI   R18                , 0x00                   ;set 0x00 to R18        (  1 clock ) 
 468:	20 e0       	ldi	r18, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R18                    ;clear  KerBase[0]      (  2 clocks) 
 46a:	20 93 09 01 	sts	0x0109, r18
		STS   KerBase+OFB_TICK1  , R18                    ;clear  KerBase[1]      (  2 clocks) 
 46e:	20 93 0a 01 	sts	0x010A, r18
		STS   KerBase+OFB_TICK2  , R18                    ;clear  KerBase[2]      (  2 clocks) 
 472:	20 93 0b 01 	sts	0x010B, r18
		STS   KerBase+OFB_TICK3  , R18                    ;clear  KerBase[3]      (  2 clocks) 
 476:	20 93 0c 01 	sts	0x010C, r18
		STS   KerBase+OFB_TICK4  , R18                    ;clear  KerBase[4]      (  2 clocks) 
 47a:	20 93 0d 01 	sts	0x010D, r18
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R18                    ;clear  KerBase[5]      (  2 clocks) 
 47e:	20 93 0e 01 	sts	0x010E, r18
		STS   KerBase+OFB_RLD    , R18                    ;clear  KerBase[6]      (  2 clocks) 
 482:	20 93 0f 01 	sts	0x010F, r18
		STS   KerBase+OFB_TID    , R18                    ;clear  KerBase[7]      (  2 clocks) 
 486:	20 93 10 01 	sts	0x0110, r18
		STS   KerBase+OFB_NTSK   , R18                    ;clear  KerBase[8]      (  2 clocks) 
 48a:	20 93 11 01 	sts	0x0111, r18
		STS   KerBase+OFB_LPR    , R18                    ;clear  KerBase[9]      (  2 clocks) 
 48e:	20 93 12 01 	sts	0x0112, r18
        STS   KerBase+OFB_PTID   , R18                    ;clear  KerBase[10]     (  2 clocks) 
 492:	20 93 13 01 	sts	0x0113, r18
		STS   KerBase+OFB_UTC    , R18                    ;clear  KerBase[11]     (  2 clocks) 
 496:	20 93 14 01 	sts	0x0114, r18
		STS   KerBase+OFB_UATC   , R18                    ;clear  KerBase[12]     (  2 clocks) 
 49a:	20 93 15 01 	sts	0x0115, r18
		STS   KerBase+OFB_USAGE  , R18                    ;clear  KerBase[13]     (  2 clocks) 
 49e:	20 93 16 01 	sts	0x0116, r18
		STS   SROCR0A            , R18                    ;clear OCR0A            (  2 clocks) 
		STS   SROCR0B            , R18                    ;clear OCR0B            (  2 clocks) 
		STS   SRTCNT0            , R18                    ;clear TCNT0            (  2 clocks) 
		#endif                                                                                 
        #ifdef KER_WDT_AS_TICK_SRC                                                             
		WDR                                               ;reset wdt              (  1 clock ) 
 4a2:	a8 95       	wdr
		LDS   R18                , SRMCUSR                ;copy MCUSR             (  1 clock ) 
 4a4:	20 91 54 00 	lds	r18, 0x0054
		ANDI  R18                , 0xFF & (0<<WDRF)       ;clear WDRF             (  1 clock ) 
 4a8:	20 70       	andi	r18, 0x00	; 0
		STS   SRMCUSR            , R18                    ;set val                (  1 clock ) 
 4aa:	20 93 54 00 	sts	0x0054, r18
		LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
 4ae:	20 91 60 00 	lds	r18, 0x0060
		ORI   R18                , 0x18                   ;set WDCE,WDE           (  1 clock ) 
 4b2:	28 61       	ori	r18, 0x18	; 24
		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 4b4:	20 93 60 00 	sts	0x0060, r18
		LDI   R18                , 0x00                   ;clear WDE              (  1 clock ) 
 4b8:	20 e0       	ldi	r18, 0x00	; 0
		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 4ba:	20 93 60 00 	sts	0x0060, r18
		STS   SRTCCR2B           , R18                    ;set val to TCCR2B      (  2 clocks) 
		LDI   R18                , 0x00                   ;clear AS2 bit          (  1 clock ) 
		STS   SRASSR             , R18                    ;set val to ASSR        (  2 clocks) 
		#endif                                                                                 
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 4be:	80 93 0e 01 	sts	0x010E, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 4c2:	60 93 0f 01 	sts	0x010F, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 4c6:	a0 91 2d 01 	lds	r26, 0x012D
 4ca:	b0 91 2e 01 	lds	r27, 0x012E
 4ce:	fe 91       	ld	r31, -X
 4d0:	ee 91       	ld	r30, -X
 4d2:	3e 91       	ld	r19, -X
 4d4:	2e 91       	ld	r18, -X
 4d6:	2d bf       	out	0x3d, r18	; 61
 4d8:	3e bf       	out	0x3e, r19	; 62
 4da:	a0 93 2d 01 	sts	0x012D, r26
 4de:	b0 93 2e 01 	sts	0x012E, r27
		RET                                               ;return from subroutine (  4 clocks) 
 4e2:	08 95       	ret

000004e4 <Kernel_Task_Create>:
;used registers          : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
Kernel_Task_Create:                                       ;total 21.50uS @8MHz    (172 clocks) 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 4e4:	a0 91 2d 01 	lds	r26, 0x012D
 4e8:	b0 91 2e 01 	lds	r27, 0x012E
 4ec:	2d b7       	in	r18, 0x3d	; 61
 4ee:	3e b7       	in	r19, 0x3e	; 62
 4f0:	2d 93       	st	X+, r18
 4f2:	3d 93       	st	X+, r19
 4f4:	ed 93       	st	X+, r30
 4f6:	fd 93       	st	X+, r31
 4f8:	a0 93 2d 01 	sts	0x012D, r26
 4fc:	b0 93 2e 01 	sts	0x012E, r27
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 500:	e5 e4       	ldi	r30, 0x45	; 69
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 502:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 504:	20 91 10 01 	lds	r18, 0x0110
 508:	e2 0f       	add	r30, r18
 50a:	20 e0       	ldi	r18, 0x00	; 0
 50c:	f2 1f       	adc	r31, r18
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 50e:	60 83       	st	Z, r22
		;set task status to KerSchSts+task_id                                                  
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 510:	eb e3       	ldi	r30, 0x3B	; 59
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 512:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 514:	20 91 10 01 	lds	r18, 0x0110
 518:	e2 0f       	add	r30, r18
 51a:	20 e0       	ldi	r18, 0x00	; 0
 51c:	f2 1f       	adc	r31, r18
		LDI   R18                , TASK_READY             ;set status as ready    (  1 clock ) 
 51e:	21 e0       	ldi	r18, 0x01	; 1
		ST    Z                  , R18                    ;save status            (  2 clocks) 
 520:	20 83       	st	Z, r18
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 522:	20 91 10 01 	lds	r18, 0x0110
		INC   R18                                         ;increment task_id      (  1 clock ) 
 526:	23 95       	inc	r18
		LDI   R19                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 528:	30 e8       	ldi	r19, 0x80	; 128
		MUL   R18                , R19                    ;multiply to get offset (  2 clocks) 
 52a:	23 9f       	mul	r18, r19
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 52c:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 52e:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 530:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 532:	11 24       	eor	r1, r1
		LDI   R18                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 534:	23 e6       	ldi	r18, 0x63	; 99
		LDI   R19                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 536:	31 e0       	ldi	r19, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
 538:	e2 0f       	add	r30, r18
		ADC   ZH                 , R19                    ;add high bytes+carry   (  1 clock ) 
 53a:	f3 1f       	adc	r31, r19
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 53c:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 53e:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 540:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 542:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 544:	0f 92       	push	r0
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	0f 92       	push	r0
 54a:	1f 92       	push	r1
 54c:	11 24       	eor	r1, r1
 54e:	2f 92       	push	r2
 550:	3f 92       	push	r3
 552:	4f 92       	push	r4
 554:	5f 92       	push	r5
 556:	6f 92       	push	r6
 558:	7f 92       	push	r7
 55a:	8f 92       	push	r8
 55c:	9f 92       	push	r9
 55e:	af 92       	push	r10
 560:	bf 92       	push	r11
 562:	cf 92       	push	r12
 564:	df 92       	push	r13
 566:	ef 92       	push	r14
 568:	ff 92       	push	r15
 56a:	0f 93       	push	r16
 56c:	1f 93       	push	r17
 56e:	2f 93       	push	r18
 570:	3f 93       	push	r19
 572:	4f 93       	push	r20
 574:	5f 93       	push	r21
 576:	6f 93       	push	r22
 578:	7f 93       	push	r23
 57a:	8f 93       	push	r24
 57c:	9f 93       	push	r25
 57e:	af 93       	push	r26
 580:	bf 93       	push	r27
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	ef 93       	push	r30
 588:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R18                , IOSPL                  ;read SPL               (  1 clock ) 
 58a:	2d b7       	in	r18, 0x3d	; 61
        IN    R19                , IOSPH                  ;read SPH               (  1 clock ) 
 58c:	3e b7       	in	r19, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R20                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 58e:	40 91 10 01 	lds	r20, 0x0110
		LSL   R20                                         ;left shift to multiply (  1 clock ) 
 592:	44 0f       	add	r20, r20
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 594:	e9 e1       	ldi	r30, 0x19	; 25
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 596:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R20                    ;add offset to array    (  1 clock ) 
 598:	e4 0f       	add	r30, r20
		LDI   R20                , 0x00                   ;clear reg              (  1 clock ) 
 59a:	40 e0       	ldi	r20, 0x00	; 0
		ADC   ZH                 , R20                    ;add carry if any       (  1 clock ) 
 59c:	f4 1f       	adc	r31, r20
		ST    Z+                 , R18                    ;SPL at KerPSp+offset   (  2 clocks) 
 59e:	21 93       	st	Z+, r18
		ST    Z                  , R19                    ;SPH at KerPSp+offset   (  2 clocks) 
 5a0:	30 83       	st	Z, r19
		;increment task_id                                                                     
		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 5a2:	20 91 10 01 	lds	r18, 0x0110
		INC   R18                                         ;increment task_id      (  1 clock ) 
 5a6:	23 95       	inc	r18
		STS   KerBase+OFB_TID    , R18                    ;store task_id          (  2 clocks) 
 5a8:	20 93 10 01 	sts	0x0110, r18
		;increment ntask                                                                       
		LDS   R18                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 5ac:	20 91 11 01 	lds	r18, 0x0111
		INC   R18                                         ;increment ntask        (  1 clock ) 
 5b0:	23 95       	inc	r18
		STS   KerBase+OFB_NTSK   , R18                    ;store ntask            (  2 clocks) 
 5b2:	20 93 11 01 	sts	0x0111, r18
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 5b6:	a0 91 2d 01 	lds	r26, 0x012D
 5ba:	b0 91 2e 01 	lds	r27, 0x012E
 5be:	fe 91       	ld	r31, -X
 5c0:	ee 91       	ld	r30, -X
 5c2:	3e 91       	ld	r19, -X
 5c4:	2e 91       	ld	r18, -X
 5c6:	2d bf       	out	0x3d, r18	; 61
 5c8:	3e bf       	out	0x3e, r19	; 62
 5ca:	a0 93 2d 01 	sts	0x012D, r26
 5ce:	b0 93 2e 01 	sts	0x012E, r27
		RET                                               ;return from subroutine (  4 clocks) 
 5d2:	08 95       	ret

000005d4 <Kernel_Start_Tasks>:
;used registers          : R0~R31                                                              
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Start_Tasks:                                       ;total 25.63uS @8MHz    (205 clocks) 
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 5d4:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 5d6:	2f ef       	ldi	r18, 0xFF	; 255
 5d8:	20 93 12 01 	sts	0x0112, r18
 5dc:	20 e0       	ldi	r18, 0x00	; 0
 5de:	20 93 13 01 	sts	0x0113, r18
 5e2:	58 2f       	mov	r21, r24

000005e4 <_KER_SCH_LOOP32>:
 5e4:	20 93 10 01 	sts	0x0110, r18
 5e8:	85 2f       	mov	r24, r21
 5ea:	ef e4       	ldi	r30, 0x4F	; 79
 5ec:	f1 e0       	ldi	r31, 0x01	; 1
 5ee:	20 91 10 01 	lds	r18, 0x0110
 5f2:	22 0f       	add	r18, r18
 5f4:	e2 0f       	add	r30, r18
 5f6:	20 e0       	ldi	r18, 0x00	; 0
 5f8:	f2 1f       	adc	r31, r18
 5fa:	20 81       	ld	r18, Z
 5fc:	31 81       	ldd	r19, Z+1	; 0x01
 5fe:	42 2f       	mov	r20, r18
 600:	43 2b       	or	r20, r19
 602:	59 f0       	breq	.+22     	; 0x61a <_VAL_NULL33>
 604:	81 30       	cpi	r24, 0x01	; 1
 606:	99 f0       	breq	.+38     	; 0x62e <_VAL_NOT_NULL33>
 608:	41 e0       	ldi	r20, 0x01	; 1
 60a:	24 1b       	sub	r18, r20
 60c:	40 e0       	ldi	r20, 0x00	; 0
 60e:	34 0b       	sbc	r19, r20
 610:	20 83       	st	Z, r18
 612:	31 83       	std	Z+1, r19	; 0x01
 614:	42 2f       	mov	r20, r18
 616:	43 2b       	or	r20, r19
 618:	51 f4       	brne	.+20     	; 0x62e <_VAL_NOT_NULL33>

0000061a <_VAL_NULL33>:
 61a:	eb e3       	ldi	r30, 0x3B	; 59
 61c:	f1 e0       	ldi	r31, 0x01	; 1
 61e:	20 91 10 01 	lds	r18, 0x0110
 622:	e2 0f       	add	r30, r18
 624:	20 e0       	ldi	r18, 0x00	; 0
 626:	f2 1f       	adc	r31, r18
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	80 83       	st	Z, r24
 62c:	08 c0       	rjmp	.+16     	; 0x63e <_EXIT_SLP_TIME33>

0000062e <_VAL_NOT_NULL33>:
 62e:	eb e3       	ldi	r30, 0x3B	; 59
 630:	f1 e0       	ldi	r31, 0x01	; 1
 632:	20 91 10 01 	lds	r18, 0x0110
 636:	e2 0f       	add	r30, r18
 638:	20 e0       	ldi	r18, 0x00	; 0
 63a:	f2 1f       	adc	r31, r18
 63c:	80 81       	ld	r24, Z

0000063e <_EXIT_SLP_TIME33>:
 63e:	81 30       	cpi	r24, 0x01	; 1
 640:	19 f0       	breq	.+6      	; 0x648 <_KER_CALC_PRIO32>
 642:	84 30       	cpi	r24, 0x04	; 4
 644:	09 f0       	breq	.+2      	; 0x648 <_KER_CALC_PRIO32>
 646:	12 c0       	rjmp	.+36     	; 0x66c <_KER_SCH_NEXT32>

00000648 <_KER_CALC_PRIO32>:
 648:	e5 e4       	ldi	r30, 0x45	; 69
 64a:	f1 e0       	ldi	r31, 0x01	; 1
 64c:	20 e0       	ldi	r18, 0x00	; 0
 64e:	80 91 10 01 	lds	r24, 0x0110
 652:	e8 0f       	add	r30, r24
 654:	f2 1f       	adc	r31, r18
 656:	80 81       	ld	r24, Z
 658:	20 91 12 01 	lds	r18, 0x0112
 65c:	82 17       	cp	r24, r18
 65e:	30 f4       	brcc	.+12     	; 0x66c <_KER_SCH_NEXT32>
 660:	80 93 12 01 	sts	0x0112, r24
 664:	20 91 10 01 	lds	r18, 0x0110
 668:	20 93 13 01 	sts	0x0113, r18

0000066c <_KER_SCH_NEXT32>:
 66c:	20 91 10 01 	lds	r18, 0x0110
 670:	23 95       	inc	r18
 672:	30 91 11 01 	lds	r19, 0x0111
 676:	23 17       	cp	r18, r19
 678:	08 f4       	brcc	.+2      	; 0x67c <_KER_SCH_EXIT32>
 67a:	b4 cf       	rjmp	.-152    	; 0x5e4 <_KER_SCH_LOOP32>

0000067c <_KER_SCH_EXIT32>:
 67c:	20 91 13 01 	lds	r18, 0x0113
 680:	20 93 10 01 	sts	0x0110, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 684:	e9 e1       	ldi	r30, 0x19	; 25
 686:	f1 e0       	ldi	r31, 0x01	; 1
 688:	20 91 10 01 	lds	r18, 0x0110
 68c:	22 0f       	add	r18, r18
 68e:	e2 0f       	add	r30, r18
 690:	20 e0       	ldi	r18, 0x00	; 0
 692:	f2 1f       	adc	r31, r18
 694:	20 81       	ld	r18, Z
 696:	31 81       	ldd	r19, Z+1	; 0x01
 698:	2d bf       	out	0x3d, r18	; 61
 69a:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 69c:	ff 91       	pop	r31
 69e:	ef 91       	pop	r30
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	bf 91       	pop	r27
 6a6:	af 91       	pop	r26
 6a8:	9f 91       	pop	r25
 6aa:	8f 91       	pop	r24
 6ac:	7f 91       	pop	r23
 6ae:	6f 91       	pop	r22
 6b0:	5f 91       	pop	r21
 6b2:	4f 91       	pop	r20
 6b4:	3f 91       	pop	r19
 6b6:	2f 91       	pop	r18
 6b8:	1f 91       	pop	r17
 6ba:	0f 91       	pop	r16
 6bc:	ff 90       	pop	r15
 6be:	ef 90       	pop	r14
 6c0:	df 90       	pop	r13
 6c2:	cf 90       	pop	r12
 6c4:	bf 90       	pop	r11
 6c6:	af 90       	pop	r10
 6c8:	9f 90       	pop	r9
 6ca:	8f 90       	pop	r8
 6cc:	7f 90       	pop	r7
 6ce:	6f 90       	pop	r6
 6d0:	5f 90       	pop	r5
 6d2:	4f 90       	pop	r4
 6d4:	3f 90       	pop	r3
 6d6:	2f 90       	pop	r2
 6d8:	1f 90       	pop	r1
 6da:	0f 90       	pop	r0
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	0f 90       	pop	r0
 6e0:	78 94       	sei
		LDI   R18                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
		STS   SRTIMSK0           , R18                    ;set to TIMSK0          (  2 clocks) 
		SEI                                               ;force enable interrupt (  1 clock ) 
		#endif                                                                                 
		                                                                                       
		#ifdef KER_WDT_AS_TICK_SRC                                                             
 6e2:	a8 95       	wdr
 6e4:	20 91 60 00 	lds	r18, 0x0060
 6e8:	28 61       	ori	r18, 0x18	; 24
 6ea:	20 93 60 00 	sts	0x0060, r18
		                                                                                       
		#ifdef KER_WDT_TICK_500MS                                                              
		LDI   R18                , 0x45                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
		#endif                                                                                 
		                                                                                       
		#ifdef KER_WDT_TICK_1000MS                                                             
 6ee:	26 e4       	ldi	r18, 0x46	; 70
 6f0:	20 93 60 00 	sts	0x0060, r18
 6f4:	78 94       	sei
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
		;execute return to jump to highest priority task                                       
		RET                                               ;return from subroutine (  4 clocks) 
 6f6:	08 95       	ret

000006f8 <Kernel_Init>:
;used registers          : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
Kernel_Init:                                              ;total 39.75uS @8MHz    (318 clocks) 
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 6f8:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R18                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 6fa:	2f e2       	ldi	r18, 0x2F	; 47
		LDI   R19                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 6fc:	31 e0       	ldi	r19, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R18                    ;set mspi to stack top  (  2 clocks) 
 6fe:	20 93 2d 01 	sts	0x012D, r18
		STS   KerSSZ+OFM_MSPI+1  , R19                    ;set mspi to stack top  (  2 clocks) 
 702:	30 93 2e 01 	sts	0x012E, r19
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 706:	a0 91 2d 01 	lds	r26, 0x012D
 70a:	b0 91 2e 01 	lds	r27, 0x012E
 70e:	2d b7       	in	r18, 0x3d	; 61
 710:	3e b7       	in	r19, 0x3e	; 62
 712:	2d 93       	st	X+, r18
 714:	3d 93       	st	X+, r19
 716:	ed 93       	st	X+, r30
 718:	fd 93       	st	X+, r31
 71a:	a0 93 2d 01 	sts	0x012D, r26
 71e:	b0 93 2e 01 	sts	0x012E, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 722:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 724:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 726:	0e 94 23 02 	call	0x446	; 0x446 <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 72a:	86 e5       	ldi	r24, 0x56	; 86
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 72c:	97 e0       	ldi	r25, 0x07	; 7
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 72e:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 730:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 732:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (172 clocks) 
 734:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 738:	a0 91 2d 01 	lds	r26, 0x012D
 73c:	b0 91 2e 01 	lds	r27, 0x012E
 740:	fe 91       	ld	r31, -X
 742:	ee 91       	ld	r30, -X
 744:	3e 91       	ld	r19, -X
 746:	2e 91       	ld	r18, -X
 748:	2d bf       	out	0x3d, r18	; 61
 74a:	3e bf       	out	0x3e, r19	; 62
 74c:	a0 93 2d 01 	sts	0x012D, r26
 750:	b0 93 2e 01 	sts	0x012E, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 754:	08 95       	ret

00000756 <Kernel_Task_Idle>:
                                                                                               
		#ifdef KER_SLEEP_MODE_ADC_NR                                                           
		LDI   R18                , 0x02                   ;set SM[2:0] val        (  1 clock ) 
		#endif
                                                                                               
		#ifdef KER_SLEEP_MODE_POWER_DOWN                                                       
 756:	24 e0       	ldi	r18, 0x04	; 4
 758:	20 93 53 00 	sts	0x0053, r18
 75c:	20 93 17 01 	sts	0x0117, r18

00000760 <_IDLE_LOOP>:
;return registers        : None                                                                
;unsafe access registers : None                                                                
Kernel_Task_Idle:                                                                              
	    KER_SLEEP_INIT                                    ;sleep init             (  5 clocks) 
    _IDLE_LOOP:                                           ;forever loop                        
	    KER_DISABLE_ANALOG_DOMAIN                         ;disable adc, ac        ( 10 clocks) 
 760:	20 91 7a 00 	lds	r18, 0x007A
 764:	2f 7e       	andi	r18, 0xEF	; 239
 766:	20 93 7a 00 	sts	0x007A, r18
 76a:	20 91 50 00 	lds	r18, 0x0050
 76e:	20 68       	ori	r18, 0x80	; 128
 770:	20 93 50 00 	sts	0x0050, r18
		#ifdef KER_CALL_FUNC_BEFORE_SLEEP                                                      
		CALL  Kernel_PreSleep_Hook                        ;call func before sleep (  8 clocks) 
 774:	0e 94 65 05 	call	0xaca	; 0xaca <Kernel_PreSleep_Hook>
		#endif                                                                                 
	    KER_ENTER_SLEEP                                   ;enter sleep mode       (  6 clocks) 
 778:	20 91 53 00 	lds	r18, 0x0053
 77c:	21 60       	ori	r18, 0x01	; 1
 77e:	20 93 53 00 	sts	0x0053, r18
 782:	88 95       	sleep
		RJMP  _IDLE_LOOP                                  ;jump to loop start     (  2 clocks) 
 784:	ed cf       	rjmp	.-38     	; 0x760 <_IDLE_LOOP>

00000786 <Kernel_Task_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Sleep:                                        ;total 37.25uS @8MHz    (298 clocks) 
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 786:	0f 92       	push	r0
 788:	0f b6       	in	r0, 0x3f	; 63
 78a:	f8 94       	cli
 78c:	0f 92       	push	r0
 78e:	1f 92       	push	r1
 790:	11 24       	eor	r1, r1
 792:	2f 92       	push	r2
 794:	3f 92       	push	r3
 796:	4f 92       	push	r4
 798:	5f 92       	push	r5
 79a:	6f 92       	push	r6
 79c:	7f 92       	push	r7
 79e:	8f 92       	push	r8
 7a0:	9f 92       	push	r9
 7a2:	af 92       	push	r10
 7a4:	bf 92       	push	r11
 7a6:	cf 92       	push	r12
 7a8:	df 92       	push	r13
 7aa:	ef 92       	push	r14
 7ac:	ff 92       	push	r15
 7ae:	0f 93       	push	r16
 7b0:	1f 93       	push	r17
 7b2:	2f 93       	push	r18
 7b4:	3f 93       	push	r19
 7b6:	4f 93       	push	r20
 7b8:	5f 93       	push	r21
 7ba:	6f 93       	push	r22
 7bc:	7f 93       	push	r23
 7be:	8f 93       	push	r24
 7c0:	9f 93       	push	r25
 7c2:	af 93       	push	r26
 7c4:	bf 93       	push	r27
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
 7ca:	ef 93       	push	r30
 7cc:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 7ce:	e9 e1       	ldi	r30, 0x19	; 25
 7d0:	f1 e0       	ldi	r31, 0x01	; 1
 7d2:	20 91 10 01 	lds	r18, 0x0110
 7d6:	22 0f       	add	r18, r18
 7d8:	e2 0f       	add	r30, r18
 7da:	20 e0       	ldi	r18, 0x00	; 0
 7dc:	f2 1f       	adc	r31, r18
 7de:	2d b7       	in	r18, 0x3d	; 61
 7e0:	3e b7       	in	r19, 0x3e	; 62
 7e2:	20 83       	st	Z, r18
 7e4:	31 83       	std	Z+1, r19	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 7e6:	ef e4       	ldi	r30, 0x4F	; 79
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 7e8:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 7ea:	20 91 10 01 	lds	r18, 0x0110
 7ee:	22 0f       	add	r18, r18
 7f0:	e2 0f       	add	r30, r18
 7f2:	20 e0       	ldi	r18, 0x00	; 0
 7f4:	f2 1f       	adc	r31, r18
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 7f6:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 7f8:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 7fa:	eb e3       	ldi	r30, 0x3B	; 59
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 7fc:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 7fe:	20 91 10 01 	lds	r18, 0x0110
 802:	e2 0f       	add	r30, r18
 804:	20 e0       	ldi	r18, 0x00	; 0
 806:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
 808:	20 e0       	ldi	r18, 0x00	; 0
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 80a:	20 83       	st	Z, r18
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 80c:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 80e:	2f ef       	ldi	r18, 0xFF	; 255
 810:	20 93 12 01 	sts	0x0112, r18
 814:	20 e0       	ldi	r18, 0x00	; 0
 816:	20 93 13 01 	sts	0x0113, r18
 81a:	58 2f       	mov	r21, r24

0000081c <_KER_SCH_LOOP56>:
 81c:	20 93 10 01 	sts	0x0110, r18
 820:	85 2f       	mov	r24, r21
 822:	ef e4       	ldi	r30, 0x4F	; 79
 824:	f1 e0       	ldi	r31, 0x01	; 1
 826:	20 91 10 01 	lds	r18, 0x0110
 82a:	22 0f       	add	r18, r18
 82c:	e2 0f       	add	r30, r18
 82e:	20 e0       	ldi	r18, 0x00	; 0
 830:	f2 1f       	adc	r31, r18
 832:	20 81       	ld	r18, Z
 834:	31 81       	ldd	r19, Z+1	; 0x01
 836:	42 2f       	mov	r20, r18
 838:	43 2b       	or	r20, r19
 83a:	59 f0       	breq	.+22     	; 0x852 <_VAL_NULL57>
 83c:	81 30       	cpi	r24, 0x01	; 1
 83e:	99 f0       	breq	.+38     	; 0x866 <_VAL_NOT_NULL57>
 840:	41 e0       	ldi	r20, 0x01	; 1
 842:	24 1b       	sub	r18, r20
 844:	40 e0       	ldi	r20, 0x00	; 0
 846:	34 0b       	sbc	r19, r20
 848:	20 83       	st	Z, r18
 84a:	31 83       	std	Z+1, r19	; 0x01
 84c:	42 2f       	mov	r20, r18
 84e:	43 2b       	or	r20, r19
 850:	51 f4       	brne	.+20     	; 0x866 <_VAL_NOT_NULL57>

00000852 <_VAL_NULL57>:
 852:	eb e3       	ldi	r30, 0x3B	; 59
 854:	f1 e0       	ldi	r31, 0x01	; 1
 856:	20 91 10 01 	lds	r18, 0x0110
 85a:	e2 0f       	add	r30, r18
 85c:	20 e0       	ldi	r18, 0x00	; 0
 85e:	f2 1f       	adc	r31, r18
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	80 83       	st	Z, r24
 864:	08 c0       	rjmp	.+16     	; 0x876 <_EXIT_SLP_TIME57>

00000866 <_VAL_NOT_NULL57>:
 866:	eb e3       	ldi	r30, 0x3B	; 59
 868:	f1 e0       	ldi	r31, 0x01	; 1
 86a:	20 91 10 01 	lds	r18, 0x0110
 86e:	e2 0f       	add	r30, r18
 870:	20 e0       	ldi	r18, 0x00	; 0
 872:	f2 1f       	adc	r31, r18
 874:	80 81       	ld	r24, Z

00000876 <_EXIT_SLP_TIME57>:
 876:	81 30       	cpi	r24, 0x01	; 1
 878:	19 f0       	breq	.+6      	; 0x880 <_KER_CALC_PRIO56>
 87a:	84 30       	cpi	r24, 0x04	; 4
 87c:	09 f0       	breq	.+2      	; 0x880 <_KER_CALC_PRIO56>
 87e:	12 c0       	rjmp	.+36     	; 0x8a4 <_KER_SCH_NEXT56>

00000880 <_KER_CALC_PRIO56>:
 880:	e5 e4       	ldi	r30, 0x45	; 69
 882:	f1 e0       	ldi	r31, 0x01	; 1
 884:	20 e0       	ldi	r18, 0x00	; 0
 886:	80 91 10 01 	lds	r24, 0x0110
 88a:	e8 0f       	add	r30, r24
 88c:	f2 1f       	adc	r31, r18
 88e:	80 81       	ld	r24, Z
 890:	20 91 12 01 	lds	r18, 0x0112
 894:	82 17       	cp	r24, r18
 896:	30 f4       	brcc	.+12     	; 0x8a4 <_KER_SCH_NEXT56>
 898:	80 93 12 01 	sts	0x0112, r24
 89c:	20 91 10 01 	lds	r18, 0x0110
 8a0:	20 93 13 01 	sts	0x0113, r18

000008a4 <_KER_SCH_NEXT56>:
 8a4:	20 91 10 01 	lds	r18, 0x0110
 8a8:	23 95       	inc	r18
 8aa:	30 91 11 01 	lds	r19, 0x0111
 8ae:	23 17       	cp	r18, r19
 8b0:	08 f4       	brcc	.+2      	; 0x8b4 <_KER_SCH_EXIT56>
 8b2:	b4 cf       	rjmp	.-152    	; 0x81c <_KER_SCH_LOOP56>

000008b4 <_KER_SCH_EXIT56>:
 8b4:	20 91 13 01 	lds	r18, 0x0113
 8b8:	20 93 10 01 	sts	0x0110, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 8bc:	e9 e1       	ldi	r30, 0x19	; 25
 8be:	f1 e0       	ldi	r31, 0x01	; 1
 8c0:	20 91 10 01 	lds	r18, 0x0110
 8c4:	22 0f       	add	r18, r18
 8c6:	e2 0f       	add	r30, r18
 8c8:	20 e0       	ldi	r18, 0x00	; 0
 8ca:	f2 1f       	adc	r31, r18
 8cc:	20 81       	ld	r18, Z
 8ce:	31 81       	ldd	r19, Z+1	; 0x01
 8d0:	2d bf       	out	0x3d, r18	; 61
 8d2:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 8d4:	ff 91       	pop	r31
 8d6:	ef 91       	pop	r30
 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	bf 91       	pop	r27
 8de:	af 91       	pop	r26
 8e0:	9f 91       	pop	r25
 8e2:	8f 91       	pop	r24
 8e4:	7f 91       	pop	r23
 8e6:	6f 91       	pop	r22
 8e8:	5f 91       	pop	r21
 8ea:	4f 91       	pop	r20
 8ec:	3f 91       	pop	r19
 8ee:	2f 91       	pop	r18
 8f0:	1f 91       	pop	r17
 8f2:	0f 91       	pop	r16
 8f4:	ff 90       	pop	r15
 8f6:	ef 90       	pop	r14
 8f8:	df 90       	pop	r13
 8fa:	cf 90       	pop	r12
 8fc:	bf 90       	pop	r11
 8fe:	af 90       	pop	r10
 900:	9f 90       	pop	r9
 902:	8f 90       	pop	r8
 904:	7f 90       	pop	r7
 906:	6f 90       	pop	r6
 908:	5f 90       	pop	r5
 90a:	4f 90       	pop	r4
 90c:	3f 90       	pop	r3
 90e:	2f 90       	pop	r2
 910:	1f 90       	pop	r1
 912:	0f 90       	pop	r0
 914:	0f be       	out	0x3f, r0	; 63
 916:	0f 90       	pop	r0
 918:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 91a:	08 95       	ret

0000091c <Kernel_Task_Constant_Latency>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency:                             ;total 3.50uS @8MHz     ( 28 clocks) 
		;create next task wakeup time (args R25:R24)                                           
		CLI                                               ;disable interrupt      (  1 clock ) 
 91c:	f8 94       	cli
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 91e:	ef e4       	ldi	r30, 0x4F	; 79
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 920:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 922:	20 91 10 01 	lds	r18, 0x0110
 926:	22 0f       	add	r18, r18
 928:	e2 0f       	add	r30, r18
 92a:	20 e0       	ldi	r18, 0x00	; 0
 92c:	f2 1f       	adc	r31, r18
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 92e:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 930:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as constant latency                                      
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 932:	eb e3       	ldi	r30, 0x3B	; 59
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 934:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 936:	20 91 10 01 	lds	r18, 0x0110
 93a:	e2 0f       	add	r30, r18
 93c:	20 e0       	ldi	r18, 0x00	; 0
 93e:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
 940:	24 e0       	ldi	r18, 0x04	; 4
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 942:	20 83       	st	Z, r18
		SEI                                               ;enable interrupt       (  1 clock ) 
 944:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 946:	08 95       	ret

00000948 <Kernel_Task_Constant_Latency_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Constant_Latency_Sleep:                       ;total 35.75uS @8MHz    (286 clocks) 
		;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 948:	0f 92       	push	r0
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	f8 94       	cli
 94e:	0f 92       	push	r0
 950:	1f 92       	push	r1
 952:	11 24       	eor	r1, r1
 954:	2f 92       	push	r2
 956:	3f 92       	push	r3
 958:	4f 92       	push	r4
 95a:	5f 92       	push	r5
 95c:	6f 92       	push	r6
 95e:	7f 92       	push	r7
 960:	8f 92       	push	r8
 962:	9f 92       	push	r9
 964:	af 92       	push	r10
 966:	bf 92       	push	r11
 968:	cf 92       	push	r12
 96a:	df 92       	push	r13
 96c:	ef 92       	push	r14
 96e:	ff 92       	push	r15
 970:	0f 93       	push	r16
 972:	1f 93       	push	r17
 974:	2f 93       	push	r18
 976:	3f 93       	push	r19
 978:	4f 93       	push	r20
 97a:	5f 93       	push	r21
 97c:	6f 93       	push	r22
 97e:	7f 93       	push	r23
 980:	8f 93       	push	r24
 982:	9f 93       	push	r25
 984:	af 93       	push	r26
 986:	bf 93       	push	r27
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
 98c:	ef 93       	push	r30
 98e:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 990:	e9 e1       	ldi	r30, 0x19	; 25
 992:	f1 e0       	ldi	r31, 0x01	; 1
 994:	20 91 10 01 	lds	r18, 0x0110
 998:	22 0f       	add	r18, r18
 99a:	e2 0f       	add	r30, r18
 99c:	20 e0       	ldi	r18, 0x00	; 0
 99e:	f2 1f       	adc	r31, r18
 9a0:	2d b7       	in	r18, 0x3d	; 61
 9a2:	3e b7       	in	r19, 0x3e	; 62
 9a4:	20 83       	st	Z, r18
 9a6:	31 83       	std	Z+1, r19	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 9a8:	eb e3       	ldi	r30, 0x3B	; 59
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 9aa:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 9ac:	20 91 10 01 	lds	r18, 0x0110
 9b0:	e2 0f       	add	r30, r18
 9b2:	20 e0       	ldi	r18, 0x00	; 0
 9b4:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_BLOCKED           ;blocked until cnt=0    (  1 clock ) 
 9b6:	20 e0       	ldi	r18, 0x00	; 0
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 9b8:	20 83       	st	Z, r18
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 9ba:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 9bc:	2f ef       	ldi	r18, 0xFF	; 255
 9be:	20 93 12 01 	sts	0x0112, r18
 9c2:	20 e0       	ldi	r18, 0x00	; 0
 9c4:	20 93 13 01 	sts	0x0113, r18
 9c8:	58 2f       	mov	r21, r24

000009ca <_KER_SCH_LOOP75>:
 9ca:	20 93 10 01 	sts	0x0110, r18
 9ce:	85 2f       	mov	r24, r21
 9d0:	ef e4       	ldi	r30, 0x4F	; 79
 9d2:	f1 e0       	ldi	r31, 0x01	; 1
 9d4:	20 91 10 01 	lds	r18, 0x0110
 9d8:	22 0f       	add	r18, r18
 9da:	e2 0f       	add	r30, r18
 9dc:	20 e0       	ldi	r18, 0x00	; 0
 9de:	f2 1f       	adc	r31, r18
 9e0:	20 81       	ld	r18, Z
 9e2:	31 81       	ldd	r19, Z+1	; 0x01
 9e4:	42 2f       	mov	r20, r18
 9e6:	43 2b       	or	r20, r19
 9e8:	59 f0       	breq	.+22     	; 0xa00 <_VAL_NULL76>
 9ea:	81 30       	cpi	r24, 0x01	; 1
 9ec:	99 f0       	breq	.+38     	; 0xa14 <_VAL_NOT_NULL76>
 9ee:	41 e0       	ldi	r20, 0x01	; 1
 9f0:	24 1b       	sub	r18, r20
 9f2:	40 e0       	ldi	r20, 0x00	; 0
 9f4:	34 0b       	sbc	r19, r20
 9f6:	20 83       	st	Z, r18
 9f8:	31 83       	std	Z+1, r19	; 0x01
 9fa:	42 2f       	mov	r20, r18
 9fc:	43 2b       	or	r20, r19
 9fe:	51 f4       	brne	.+20     	; 0xa14 <_VAL_NOT_NULL76>

00000a00 <_VAL_NULL76>:
 a00:	eb e3       	ldi	r30, 0x3B	; 59
 a02:	f1 e0       	ldi	r31, 0x01	; 1
 a04:	20 91 10 01 	lds	r18, 0x0110
 a08:	e2 0f       	add	r30, r18
 a0a:	20 e0       	ldi	r18, 0x00	; 0
 a0c:	f2 1f       	adc	r31, r18
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	80 83       	st	Z, r24
 a12:	08 c0       	rjmp	.+16     	; 0xa24 <_EXIT_SLP_TIME76>

00000a14 <_VAL_NOT_NULL76>:
 a14:	eb e3       	ldi	r30, 0x3B	; 59
 a16:	f1 e0       	ldi	r31, 0x01	; 1
 a18:	20 91 10 01 	lds	r18, 0x0110
 a1c:	e2 0f       	add	r30, r18
 a1e:	20 e0       	ldi	r18, 0x00	; 0
 a20:	f2 1f       	adc	r31, r18
 a22:	80 81       	ld	r24, Z

00000a24 <_EXIT_SLP_TIME76>:
 a24:	81 30       	cpi	r24, 0x01	; 1
 a26:	19 f0       	breq	.+6      	; 0xa2e <_KER_CALC_PRIO75>
 a28:	84 30       	cpi	r24, 0x04	; 4
 a2a:	09 f0       	breq	.+2      	; 0xa2e <_KER_CALC_PRIO75>
 a2c:	12 c0       	rjmp	.+36     	; 0xa52 <_KER_SCH_NEXT75>

00000a2e <_KER_CALC_PRIO75>:
 a2e:	e5 e4       	ldi	r30, 0x45	; 69
 a30:	f1 e0       	ldi	r31, 0x01	; 1
 a32:	20 e0       	ldi	r18, 0x00	; 0
 a34:	80 91 10 01 	lds	r24, 0x0110
 a38:	e8 0f       	add	r30, r24
 a3a:	f2 1f       	adc	r31, r18
 a3c:	80 81       	ld	r24, Z
 a3e:	20 91 12 01 	lds	r18, 0x0112
 a42:	82 17       	cp	r24, r18
 a44:	30 f4       	brcc	.+12     	; 0xa52 <_KER_SCH_NEXT75>
 a46:	80 93 12 01 	sts	0x0112, r24
 a4a:	20 91 10 01 	lds	r18, 0x0110
 a4e:	20 93 13 01 	sts	0x0113, r18

00000a52 <_KER_SCH_NEXT75>:
 a52:	20 91 10 01 	lds	r18, 0x0110
 a56:	23 95       	inc	r18
 a58:	30 91 11 01 	lds	r19, 0x0111
 a5c:	23 17       	cp	r18, r19
 a5e:	08 f4       	brcc	.+2      	; 0xa62 <_KER_SCH_EXIT75>
 a60:	b4 cf       	rjmp	.-152    	; 0x9ca <_KER_SCH_LOOP75>

00000a62 <_KER_SCH_EXIT75>:
 a62:	20 91 13 01 	lds	r18, 0x0113
 a66:	20 93 10 01 	sts	0x0110, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 a6a:	e9 e1       	ldi	r30, 0x19	; 25
 a6c:	f1 e0       	ldi	r31, 0x01	; 1
 a6e:	20 91 10 01 	lds	r18, 0x0110
 a72:	22 0f       	add	r18, r18
 a74:	e2 0f       	add	r30, r18
 a76:	20 e0       	ldi	r18, 0x00	; 0
 a78:	f2 1f       	adc	r31, r18
 a7a:	20 81       	ld	r18, Z
 a7c:	31 81       	ldd	r19, Z+1	; 0x01
 a7e:	2d bf       	out	0x3d, r18	; 61
 a80:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 a82:	ff 91       	pop	r31
 a84:	ef 91       	pop	r30
 a86:	df 91       	pop	r29
 a88:	cf 91       	pop	r28
 a8a:	bf 91       	pop	r27
 a8c:	af 91       	pop	r26
 a8e:	9f 91       	pop	r25
 a90:	8f 91       	pop	r24
 a92:	7f 91       	pop	r23
 a94:	6f 91       	pop	r22
 a96:	5f 91       	pop	r21
 a98:	4f 91       	pop	r20
 a9a:	3f 91       	pop	r19
 a9c:	2f 91       	pop	r18
 a9e:	1f 91       	pop	r17
 aa0:	0f 91       	pop	r16
 aa2:	ff 90       	pop	r15
 aa4:	ef 90       	pop	r14
 aa6:	df 90       	pop	r13
 aa8:	cf 90       	pop	r12
 aaa:	bf 90       	pop	r11
 aac:	af 90       	pop	r10
 aae:	9f 90       	pop	r9
 ab0:	8f 90       	pop	r8
 ab2:	7f 90       	pop	r7
 ab4:	6f 90       	pop	r6
 ab6:	5f 90       	pop	r5
 ab8:	4f 90       	pop	r4
 aba:	3f 90       	pop	r3
 abc:	2f 90       	pop	r2
 abe:	1f 90       	pop	r1
 ac0:	0f 90       	pop	r0
 ac2:	0f be       	out	0x3f, r0	; 63
 ac4:	0f 90       	pop	r0
 ac6:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 ac8:	08 95       	ret

00000aca <Kernel_PreSleep_Hook>:
;used registers          : R24, R25, R30(ZL), R31(ZH)                                          
;arg registers           : R25:R24(FunctionPtr)                                                
;return registers        : None                                                                
;unsafe access registers : R24, R25, R30(ZL), R31(ZH)                                          
Kernel_PreSleep_Hook:                                     ;total 1.00uS @8MHz     (  8 clocks) 
        MOVW  R30                , R24                    ;move pointer to Z      (  1 clock ) 
 aca:	fc 01       	movw	r30, r24
		ICALL                                             ;indirect call          (  3 clocks) 
 acc:	09 95       	icall
		RET                                               ;return from subroutine (  4 clocks) 
 ace:	08 95       	ret

00000ad0 <Kernel_Task_Sleep_Time_Get>:
;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
;arg registers           : R24(TaskID)                                                         
;return registers        : R25:R24(SleepTime)                                                  
;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
		MOV   R18                , R24                    ;copy                   (  1 clock ) 
 ad0:	28 2f       	mov	r18, r24
		LSL   R18                                         ;x2                     (  1 clock ) 
 ad2:	22 0f       	add	r18, r18
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 ad4:	ef e4       	ldi	r30, 0x4F	; 79
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 ad6:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
 ad8:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
 ada:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
 adc:	f2 1f       	adc	r31, r18
		LDD   R24                , Z+0                    ;load sleep time        (  2 clocks) 
 ade:	80 81       	ld	r24, Z
		LDD   R25                , Z+1                    ;load sleep time        (  2 clocks) 
 ae0:	91 81       	ldd	r25, Z+1	; 0x01
		RET                                               ;return from subroutine (  4 clocks) 
 ae2:	08 95       	ret

00000ae4 <Kernel_Task_Status_Get>:
;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskSts)                                                        
;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
		MOV   R18                , R24                    ;copy                   (  1 clock ) 
 ae4:	28 2f       	mov	r18, r24
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 ae6:	eb e3       	ldi	r30, 0x3B	; 59
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 ae8:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
 aea:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
 aec:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
 aee:	f2 1f       	adc	r31, r18
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 af0:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 af2:	08 95       	ret

00000af4 <Kernel_NTask_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(NTask)                                                          
;unsafe access registers : R24                                                                 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 af4:	80 91 11 01 	lds	r24, 0x0111
		RET                                               ;return from subroutine (  4 clocks) 
 af8:	08 95       	ret

00000afa <Kernel_Task_Prio_Get>:
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskPriority)                                                   
;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R18                , R24                    ;copy task_id           (  1 clock ) 
 afa:	28 2f       	mov	r18, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 afc:	e5 e4       	ldi	r30, 0x45	; 69
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 afe:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
 b00:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
 b02:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
 b04:	f2 1f       	adc	r31, r18
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 b06:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 b08:	08 95       	ret

00000b0a <Kernel_Lowest_Prio_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(LowestPriorityVal)                                              
;unsafe access registers : R24                                                                 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 b0a:	80 91 12 01 	lds	r24, 0x0112
		RET                                               ;return from subroutine (  4 clocks) 
 b0e:	08 95       	ret

00000b10 <Kernel_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
;unsafe access registers : R24                                                                 
Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 b10:	80 91 13 01 	lds	r24, 0x0113
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 b14:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 b16:	08 95       	ret

00000b18 <Kernel_Abs_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
;unsafe access registers : R24                                                                 
Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 b18:	80 91 13 01 	lds	r24, 0x0113
		RET                                               ;return from subroutine (  4 clocks) 
 b1c:	08 95       	ret

00000b1e <Kernel_CPU_Usage_Get>:
;arg registers           : None                                                                
;return registers        : R24(CurrentCpuUsage)->In percentage                                 
;unsafe access registers : R24                                                                 
Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
		;get cpu usage, return R24                                                             
		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
 b1e:	80 91 16 01 	lds	r24, 0x0116
		RET                                               ;return from subroutine (  4 clocks) 
 b22:	08 95       	ret

00000b24 <__udivmodsi4>:
 b24:	a1 e2       	ldi	r26, 0x21	; 33
 b26:	1a 2e       	mov	r1, r26
 b28:	aa 1b       	sub	r26, r26
 b2a:	bb 1b       	sub	r27, r27
 b2c:	fd 01       	movw	r30, r26
 b2e:	0d c0       	rjmp	.+26     	; 0xb4a <__udivmodsi4_ep>

00000b30 <__udivmodsi4_loop>:
 b30:	aa 1f       	adc	r26, r26
 b32:	bb 1f       	adc	r27, r27
 b34:	ee 1f       	adc	r30, r30
 b36:	ff 1f       	adc	r31, r31
 b38:	a2 17       	cp	r26, r18
 b3a:	b3 07       	cpc	r27, r19
 b3c:	e4 07       	cpc	r30, r20
 b3e:	f5 07       	cpc	r31, r21
 b40:	20 f0       	brcs	.+8      	; 0xb4a <__udivmodsi4_ep>
 b42:	a2 1b       	sub	r26, r18
 b44:	b3 0b       	sbc	r27, r19
 b46:	e4 0b       	sbc	r30, r20
 b48:	f5 0b       	sbc	r31, r21

00000b4a <__udivmodsi4_ep>:
 b4a:	66 1f       	adc	r22, r22
 b4c:	77 1f       	adc	r23, r23
 b4e:	88 1f       	adc	r24, r24
 b50:	99 1f       	adc	r25, r25
 b52:	1a 94       	dec	r1
 b54:	69 f7       	brne	.-38     	; 0xb30 <__udivmodsi4_loop>
 b56:	60 95       	com	r22
 b58:	70 95       	com	r23
 b5a:	80 95       	com	r24
 b5c:	90 95       	com	r25
 b5e:	9b 01       	movw	r18, r22
 b60:	ac 01       	movw	r20, r24
 b62:	bd 01       	movw	r22, r26
 b64:	cf 01       	movw	r24, r30
 b66:	08 95       	ret

00000b68 <_exit>:
 b68:	f8 94       	cli

00000b6a <__stop_program>:
 b6a:	ff cf       	rjmp	.-2      	; 0xb6a <__stop_program>
